// ==UserScript==// @name            Sangu Package// @author          Laoujin / De Goede Fee// @namespace       sangu.be// @description     We are Sangu. You will be assimilated. Resistance is Futile.// @icon            http://www.sangu.be/images/favicon.png// @include         http://*.tribalwars.nl/game.php?*// @include         http://*.die-staemme.de/game.php?*// @version         3.5.2// ==/UserScript==// The not-one-file source code can be found at: // https://github.com/Laoujin/SanguPackagefunction sangu_ready() {	//var start_time = new Date();	//console.time("SanguPackage");    var sangu_version = '3.5.2';    // User config    var user_data = {};	// Settings on a specific world	switch (game_data.world) {		case 'nl16':			// Settings specific for w10 on nl server			user_data.worldSpecific = {				villageName: ['Jaar van de val van Temp', 'Oh the horror', 'Wounded Knee', 'Gesmurft', 'Credo Reloaded'], // dorpsnamen instellen				favs: [ // favorite locations on the map						{active: false, name: "fixedPosition1", x: 462, y: 647 },						{ active: false, name: "fixedPosition2", x: 492, y: 652 }						],				customPlaceLinks: // Extra links in the place:					[						{ active: true, type: 'def', name: 'AllDef', spear: 25000, heavy: 5000, archer: 25000, sendAlong: 0 },						{ active: true, type: 'def', name: '1/2-Zc', spear: 4000, heavy: 1000, sendAlong: 500 },						{ active: true, type: 'off', name: 'Smart'/*, spear: 25000*/, sword: -10, axe: 25000, spy: 1, light: 5000/*, heavy: 5000*/, marcher: 5000, ram: 5000, catapult: 5000, sendAlong: 0 },						{ active: true, type: 'off', name: 'Axe', spear: 25000, axe: 25000, spy: 1, light: 5000, heavy: 5000, marcher: 5000, sendAlong: 0 },						{ active: true, type: 'off', name: 'Sword', spear: 25000, sword: -10, axe: 25000, spy: 1, light: 5000, heavy: 5000, marcher: 5000, sendAlong: 0, required: ['sword', 1] },							{ active: false, type: 'def', name: 'AllDef', spear: 25000, sword: 25000, heavy: 5000, archer: 25000, sendAlong: 0 },						{ active: false, type: 'def', name: '3th-HC', spear: 2500, heavy: 650, sendAlong: 0 },						{ active: false, type: 'def', name: '4th-HC', spear: 2000, heavy: 500, sendAlong: 0 },						{ active: false, type: 'def', name: '1/2-Sw', spear: 5000, sword: 5000, sendAlong: 500 },						{ active: false, type: 'def', name: '3th-Sw', spear: 3300, sword: 3300, sendAlong: 0 },						{ active: false, type: 'def', name: '4th-Sw', spear: 2500, sword: 2500, sendAlong: 0 }				// use negative numbers to leave x units home					]			};			break;			case 'nlXX':			// Settings specific for world XX			user_data.worldSpecific = {							};			break;	}	// These settings are applied to all worlds	$.extend(user_data, {		colors: {			error: "tomato",			good: "limegreen",			special: "aqua",			neutral: "#DED3B9"		},		gsStorageShow: true, /* All pages: true/false: color the resources based on how much the storage place is filled */		gsStorageBackground: ['Greenyellow', 'Chartreuse', 'Limegreen', 'Mediumseagreen', 'Forestgreen', 'Orange', 'Coral', 'Tomato', 'Orangered', 'Red'], /* All pages: Colors used for the previous setting. First is least filled, last is most filled storage place */		overviewBlinkResources: true, /* All pages: Blink the resources if the storage place is full */		editAttackLink: true, /* All pages: Edit the incoming attacks/support links: add "show all groups" and "show all pages" to the original links */		colorSupport: 'rgb(255, 245, 218)', /* Main village overview: give incoming support a different background color */		villageName: [], /* Add village names to the village headquarters to quickly edit the village name to a preset name. Set to [] or null to disable, for 1 village name use ['MyVillageName'] or for more names: ['name1', 'name2', 'name3'] */		villageNameClick: true, /* true: one of the previous button clicked automatically changes the village name. false: only fills in the name in the textbox but does not click the button */		ajaxLoyalty: true, /* Get the loyalty at the building construction/destruction page */		calculateSnob: true, /* nobles: calculates how many nobles can be produced immediately */		reportPublish: ["own_units", "own_losses", "opp_units", "opp_losses", "carry", "buildings", "own_coords", "opp_coords", "belief"], /* Publishing report: automatically check the 'show' checkboxes */		ajaxSeperateSupport: true, /* Village overview: Seperate own and supported troops */		ajaxSeperateSupportStacks: true, /* Village overiew: Calculate stacks for own and supported troops */		farmLimit: {			stackColors: ['tomato', 'Mediumseagreen', '#DED3B9'],			acceptableOverstack: [1.35, 1.2, 0.5], /* Different pages: % of acceptable overstack (only relevant for farmlimit worlds) */			unlimitedStack: [100000, 60000, 24000] /* Different pages: Calculate stacks based on total troops (for non farmlimit worlds) */		},			command: { /* features for the own troops overview page */			sumRow: true, /* Add a totalrow between different villages */				filterMinPopulation: 18000, /* Default number filled in to filter on village stack */			filterMinDefaultType: 'axe', /* This unit type is by default selected in the filter dropdown */			filterMinDefault: 5000, /* The default number filled in to filter on troop amounts */			filterMin: { axe: 7000, spear: 3000, heavy: 500, catapult: 50, spy: 50, light: 2000, ram: 1, snob: 2 }, /* Default filter numbers for the other units */			filterMinOther: 5000, /* Use this number as the default when the unit is not present in filterMin */			filterAutoSort: true, /* Automatically sort the list on walking distance when entering a target village */				/* These features apply to the commands overview page */			filterFakeMaxPop: 300, /* Commands fake filter: Everything below 300 pop is considered a fake attack */			bbCodeExport: { /* BB code export */				requiredTroopAmount: 100			}		},			displayDays: false, /* true: display (walking)times in days when > 24 hours. false: always displays in hours */		incoming: { /* Features for the built in TW tagger */ 			autoOpenTagger: true, 		/* Open the tagger automatically if the incoming attack has not yet been renamed */			forceOpenTagger: true, 	/* Always open the tagger automatically */			renameInputTexbox: "{unit} ({xy}) {player} F{fields}{night}", /* Possibilities: {id}:internal tw attack id {unit}: short unitname {xy}: coordinates {player} {village}: full village name {c}: continent. Set to "" to disable. */			villageBoxSize: 600, 			/* Adjust the width of the table with the village information (support for 2-click) */			invertSort: true		/* true=noblemen at the top and scouts at the bottom of the table */		},			mainTagger: {			active: true,			autoOpen: true,			inputBoxWidth: 300,			defaultDescription: "OK",			otherDescriptions:				[				{ name: "DODGE THIS", prefix: true },				{ name: "NIGHTBONUS", prefix: false },				{ name: "CHECK STACK", prefix: true },				{ name: "TIME IT!", prefix: true },				{ name: "NOBLE!!", prefix: true }				],			prefix: "-----------------------------------------",			autoOpenCommands: false,			minutesDisplayDodgeTimeOnMap: 3,			minutesWithoutAttacksDottedLine: 3 * 60		},			villageInfo: {			active: true,			off_link: "&group=3093&unit=2&amount=5000&sort=true&changeSpeed=ram", /* On info_village page add extra link to attack. 3093=group id of off villages. Filter: amount=5000 unit=2=axe */			def_link: "&group=3092&unit=0&amount=3000&sort=true&changeSpeed=spear"		},			resources: {			requiredResDefault: 250000,			requiredMerchants: 50,			filterMerchants: true,			filterRows: false,			bbcodeMinimumDiff: 50000		},			favs: [],		jumper: {			enabled: true,			autoShowInputbox: false		},			proStyle: true,		marketResizeImage: true,		autoMarketFocus: true,			scriptBarEditBoxCols: 700,		scriptBarEditBoxRows: 12,			attackAutoRename: true,		rallyPointAttackBoxWidth: 600,				confirm: {			addExtraOkButton: true,			autoAttackFocus: true,			replaceNightBonus: true,			replaceTribeClaim: true,			addCatapultImages: true		},			scoutVillage: 100,		scoutPlaceLinks: [5, 100, 500],		fakePlaceLink: true,		fakePlaceExcludeTroops: [],		noblePlaceLink: true,		noblePlaceLinksForceShow: true,		noblePlaceLinkDivideAddRam: false,		nobleSupport: [{ Population: 200, Unit: 'light', VillageType: 'off' }, { Population: 600, Unit: 'heavy', VillageType: 'def'}],		attackLinkNames: { fake: 'Fake', scout: 'Scout', nobleMax: 'NobleFirst', nobleMin: 'NobleMin', nobleDivide: 'NobleDivide' },			customPlaceLinks:			[				// use minus zero numbers to leave so many units at home				{ active: true, type: 'def', name: 'AllDef', spear: 25000, heavy: 5000, archer: 25000, sword: 25000, sendAlong: 0 },				{ active: true, type: 'def', name: '1/2-Zc', spear: 4000, heavy: 1000, sendAlong: 500 },				{ active: true, type: 'off', name: 'Smart'/*, spear: 25000*/, sword: -10, axe: 25000, spy: 1, light: 5000/*, heavy: 5000*/, marcher: 5000, ram: 5000, catapult: 5000, sendAlong: 0 },				{ active: true, type: 'off', name: 'Bijl', spear: 25000, axe: 25000, spy: 1, light: 5000, heavy: 5000, marcher: 5000, sendAlong: 0 },				{ active: true, type: 'off', name: 'Zwaard', spear: 25000, sword: -10, axe: 25000, spy: 1, light: 5000, heavy: 5000, marcher: 5000, sendAlong: 0, required: ['sword', 1] },					{ active: false, type: 'def', name: 'AlleDef', spear: 25000, sword: 25000, heavy: 5000, archer: 25000, sendAlong: 0 },				{ active: false, type: 'def', name: '3deZc', spear: 2500, heavy: 650, sendAlong: 0 },				{ active: false, type: 'def', name: '4deZc', spear: 2000, heavy: 500, sendAlong: 0 },				{ active: false, type: 'def', name: 'HelftZw', spear: 5000, sword: 5000, sendAlong: 500 },				{ active: false, type: 'def', name: '3deZw', spear: 3300, sword: 3300, sendAlong: 0 },				{ active: false, type: 'def', name: '4deZw', spear: 2500, sword: 2500, sendAlong: 0 }			],		alternativeTargetPosition: false,			restack: {			to: 72000,			requiredDifference: 1000,			fieldsDistanceFilterDefault: 30,			filterReverse: true,			sufficient: 80000		},			showPlayerProfileOnVillage: false,		profile: {			show: true,			moveClaim: true,			mapLink: { show: true, fill: '000000', zoom: '200', grid: true, playerColor: 'ffff00', tribeColor: '0000FF', centreX: 500, centreY: 500, ownColor: 'FFFFFF', markedOnly: true, yourTribeColor: "FF0000" },			playerGraph: [["points", false], ["villages", false], ["od", false], ["oda", false], ["odd", false], ["rank", false]], // small / big / false			tribeGraph: [["points", false], ["villages", false], ["od", false], ["oda", false], ["odd", false], ["rank", false], ["members", 'big', true]],			twMapPlayerGraph: { player: [true, true], p_player: [false, false], oda_player: [true, false], odd_player: [true, false] },			twMapTribeGraph: { tribe: [true, true], p_tribe: [false, false], oda_tribe: [true, false], odd_tribe: [true, false] },				popup: { show: true, width: 900, height: 865 }		},		smithy:			[			['offense', { spear: [3, 3], sword: [1, 1], axe: [3, 3], spy: [0, 0], light: [3, 3], heavy: [3, 3], ram: [2, 2], catapult: [0, 0]}],			['defense', { spear: [3, 3], sword: [1, 1], axe: [0, 3], spy: [0, 3], light: [0, 3], heavy: [3, 3], ram: [0, 1], catapult: [1, 3]}],			['catapult', { spear: [2, 3], sword: [1, 1], axe: [3, 3], spy: [0, 3], light: [2, 3], heavy: [3, 3], ram: [0, 0], catapult: [2, 3]}]			],		buildings: {			main: [20, 20],			barracks: [25, 25],			stable: [20, 20],			garage: [1, 5],			church: [0, 1],			church_f: [0, 1],			snob: [1, 3],			smith: [20, 20],			place: [1, 1],			statue: [0, 1],			market: [10, 20],			wood: [30, 30],			stone: [30, 30],			iron: [30, 30],			farm: [30, 30],			storage: [30, 30],			hide: [0, 10],			wall: [20, 20]		}	});	if (user_data.worldSpecific != undefined) {		$.extend(user_data, user_data.worldSpecific);		user_data.worldSpecific = null;	}		var trans = 	{		tw: {			units: {				names: { "spear": "Speer", "sword": "Zwaard", "archer": "Boog", "axe": "Bijl", "spy": "Verk", "light": "Lc", "marcher": "Bb", "heavy": "Zc", "ram": "Ram", "catapult": "Kata", "knight": "Ridder", "snob": "Edel" },				shortNames: { "spear": "Sp", "sword": "Zw", "archer": "Boog", "axe": "Bijl", "spy": "Ver", "light": "Lc", "marcher": "Bb", "heavy": "Zc", "ram": "Ram", "catapult": "Kata", "knight": "Ridder", "snob": "Edel" },				militia: "Militia"			},			all: {				today: "vandaag om",				tomorrow: "morgen om",				dateOn: "op",				timeOn: "om",				farm: "Boerderij",				wood: "Hout",				iron: "IJzer",				stone: "Leem",				groups: "Groepen",				continentPrefix: "C"			},			main: {				toGraphicOverview: "naar het grafische dorpsoverzicht",				loyaltyHeader: "Toestemming:"			},			command: {				returnText: "Terugkeer",				attack: "Aanval",				support: "Ondersteuning",				haul: "Buit:",				abortedOperation: "Afgebroken commando",				catapultTarget: "Katapultdoel:",				buttonValue: "OK",				attackOn: "Aanval op ",				supportFor: "Ondersteuning voor ",				walkingTimeTitle: "Duur:"			},			incoming: {				defaultCommandName: "Bevel"			},			place: {				troopMovements: "Troepenbewegingen"			},			market: {				incomingTransports: "Binnenkomende transporten"			},			profile: {				title: "Profiel",				claimedBy: "Geclaimd door:",				awardsWon: "Behaalde awards"			},			overview: {				village: "Dorp",				incomingTroops: "Aankomend"			}		},		sp: {			sp: {				configuration: "Sangu Package Configuration",				activatePackage: "Sangu Package activeren",				deactivatePackage: "Sangu Package deactiveren",				activatePackageWithCompatibility: "Sangu Package (v{version}) mogelijk incompatibel met huidige TW versie",				firstTimeRun: "<b>Welkom!</b> Het Sangu Package is momenteel inactief. Klik op de rode indicator naast de opslagplaats hierboven om het package aan en uit te schakelen."			},			all: {				populationShort: "Pop",				population: "Populatie",				total: "Totaal",				last: "Laatste",				target: "Doel",				targetEx: "Doelwit",				more: "meer",				less: "minder",				all: "Alle",				withText: "met",				merchants: "Handelaren",				tooMuch: "Teveel:",				tooLittle: "Te weinig:",				further: "verder",				closer: "dichter",				fieldsSuffix: "(F{0})"			},			main: {				unitsReplacement: "Eigen",				unitsOther: "Ondersteunende Eenheden",				rallyPointTroops: "troepen",				ownStackTitle: "Totale populatie van de eigen troepen"			},			map: {				dodgeLastTagged: "Dodgetijd van de laatst getagde aanval"			},			tagger: {				openButton: "Open Tagger",				rename: "Herbenoemen",				renameTooltip: "Alle bevelen waarvan de checkbox aangevinkt is hernoemen",				incomingTroops: "Binnenkomende troepen",				arrival: "Aankomst",				arrivalIn: "Aankomst in",				sentNow: "Zojuist",				sentSeconds: "seconde(n)",				sent1Minute: "1 minuut",				sentMinutes: "minuten",				sent1Hour: "1 uur",				sentHours: "uren",				sentOn: "Verstuurtijd",				ago: "Geleden",				arrivesInNightBonus: " (NACHT!)",				tagIt: "Aanval Taggen",				checkAllSupport: "Aanvinken van alle zichtbare ondersteuning",				uncheckAllSupport: "Uitvinken van alle zichtbare ondersteuning",				tagged: "Tagged!",				dodgeTime: "Dodgetijd",				slowest: "Traagst",				slowestTip: "Traagste eenheid in het dorp",				allAbove: "Alle vroegere aanvallen aanvinken",				allBelow: "Alle latere aanvallen aanvinken",				prefix: "Prefix? ",				renameTo: "Hernoemen naar: ",				switchModus: "&raquo; Alle aanvallen openen/sluiten",				checkAllAttacks: "Aanvinken van alle zichtbare aanvallen",				uncheckAllAttacks: "Uitvinken van alle zichtbare aanvallen",				activeDodgeTime: "Actieve dodgetijd (wordt op de kaart getoond)",				totalAttacksOnVillage: "Aantal aanvallen"			},			place: {				distance: "Afstand",				backOn: "Terug op",				onlyAttack: "1 aanval op {arrivalDateFirst} ({timeLeftFirst})",				multipleAttack: "{amount} aanvallen tussen {arrivalDateFirst} ({timeLeftFirst}) en {arrivalDateLast} ({timeLeftLast})"			},			jumper: {				goToMap: "Ga naar de kaart"			},			command: {				homeTime: "Thuiskomst",				returnOn: "Terug op:",				arrival: "Aankomst",				dodgeNotFarEnough: "De dodge is niet ver genoeg!",				dodgeMinuteReturn: "(Terugkeer na {minutes})",				catapultImageTitle: "Klik om gebouw te vernietigen"			},			overviews: {				totalVillages: "Aantal dorpen:",				loadNextPage: "[volgende pagina laden]"			},			troopOverview: {				removeVillage: "Dorp verwijderen",				toThePlace: "Verzamelplaats",				setTargetVillageButton: "OK",				commandTitle: "Opdracht",				selectUnitSpeed: "Selecteer {0} als traagste eenheid. (Klik op deze pagina, Dubbel klik op alle pagina's.)",				nightBonus: "Nacht?",				village: "Dorp",				filterTroops: "Filter",				filterPopulation: "Filter populatie",				calcStack: "Bereken stack",				filterNoble: "Filter edels",				filterUnderAttack: "Filter onder aanval",				sort: "Sorteren",				restack: "Stack BB Codes",				cheapNobles: "Goedkope edelmannen beschikbaar"			},			prodOverview: {				filter: "Filter",				filterFullGS: "Volle opslag",				merchantTooltip: "Vink aan om handelaren te highlighten",				merchantAmountTooltip: "Als de checkbox aangevinkt is worden dorpen met minder dan x handelaren in het rood gehighlight",				bbCodes: "BB Codes",				bbCodesInfo: "Gebruik IMG",				filterTooltip: "Dorpen die niet aan de filtercriteria voldoen verbergen",				filterTooltipReverse: "Dorpen die voldoen aan de filtercriteria highlighten",				filterFullGSTooltip: "Dorpen waarbij niet minstens 1 van de grondstoffen vol is verbergen",				filterFullGSTooltipReverse: "Dorpen waarbij minstens 1 van de grondstoffen vol is highlighten",				filterAllTooltip: "Dorpen waarbij niet minstens 1 van de grondstoffen meer/minder dan x is verbergen",				filterAllTooltipReverse: "Dorpen waarbij minstens 1 van de grondstoffen meer/minder dan x is highlighten",				filter1Tooltip: "Dorpen waarbij er nier meer/minder dan x {0} is verbergen",				filter1TooltipReverse: "Dorpen waarbij er meer/minder dan x {0} is highlighten"			},			buildOverview: {				optimistic: "Optimistisch",				mark: "Duiden",				filter: "Filteren"			},			smithOverview: {				optimistic: "Optimistisch",				mark: "Duiden",				filter: "Filteren"			},			defOverview: {				stackButton: "Totalen berekenen",				stackTooltip: "Totale stack en afstanden berekenen",				stackFilter: "Filter op stack",				stackFilterTooltip: "Filter dorpen met meer/minder dan x totale stack vanbuiten het dorp",				village: "Dorp:",				distFilter: "Filter op afstand",				distFilterTooltip: "Filter alle dorpen die verder/dichter dan x velden liggen van dorp y",				stackBBCodes: "Stack BBCodes",				stackBBCodesTooltip: "Bepaal BB codes en aantal troepen voor een stack tot x populatie voor alle zichtbare dorpen",				filterNoSupport: "Zonder OS wegfilteren",				filterNoSupportTooltip: "Wegfilteren van alle dorpen waar geen ondersteuning meer zichtbaar is",				extraFiltersSupport: "Ondersteunende dorpen filters:",				extraFiltersDefense: "Ondersteuning filters:",				extraFiltersReverse: "De filtering omdraaien",				extraFiltersInfo: "Filters omdraaien",				distFilter2: "Afstand filter",				freeTextFilter: "Tekst filter",				barbarianFilter: "Barbarendorpen",				barbarianFilterTooltip: "Toon alle ondersteuningen naar barbarendorpen",				nobleFilter: "Alle edel-ondersteuning tonen",				nobleFilterRev: "Alle edel-ondersteuning wegfilteren",				spyFilter: "Alle verkenner-ondersteuning tonen",				spyFilterRev: "Alle verkenner-ondersteuning wegfilteren",				attackFilter: "Alle aanval-ondersteuning tonen",				attackFilterRev: "Alle aanval-ondersteuning wegfilteren",				supportFilter: "Alle verdediging-ondersteuning tonen",				supportFilterRev: "Alle verdediging-ondersteuning wegfilteren",				otherPlayerFilterShow: "tonen",				otherPlayerFilterHide: "wegfilteren",				otherPlayerFilterTo: "Alle ondersteuningen naar andere spelers {action}",				otherPlayerFilterFrom: "Alle ondersteuningen van andere spelers {action}",					filterTooltipVillageTypeSupporting: "Ondersteunende dorpen",				filterTooltipVillageTypeSupported: "Ondersteunde dorpen",				freeTextFilterTooltip: "{villageType} {filterType} de tekst wegfilteren",				freeTextFilterTooltipFilterTypeWith: "met",				freeTextFilterTooltipFilterTypeWithout: "zonder",				distanceFilterTooltip: "{villageType} die {filterType} dan het aangegeven aantal velden liggen wegfilteren",				distanceFilterTooltipFilterTypeCloser: "dichter",				distanceFilterTooltipFilterTypeFurther: "verder",					totalFromOtherVillages: "totaal uit andere dorpen",				totalInOtherVillages: "totaal in andere dorpen",				freeText: "Vrij tekstveld (wordt niet opgeslagen!):",				fieldsPrefix: "F{0}",				thousandSuffix: "k",				totalVillages: "Dorpen ({0})",				distanceToVillageNoneEntered: "Geef een co�naat! (eerste tekstveld)",				distanceToVillage: "Afstand tot {0}",				filterUnderAttack: "Filter onder aanval"			},			commands: {				filterReturn: "Filter terugkeer",				totalRows: "Somlijn",				group: "Groeperen",				totalRowsText: "{0}x OS = {1} pop",				totalVillagesSupport: "Ondersteunde dorpen:",				totalVillagesAttack: "Aangevallen dorpen:",				totalSupport: "Ondersteuningen",				totalAttack: "Aanvallen",				bbCodeExport: "BBCode Export",				bbCodeExportTooltip: "Overblijvende aanvallen exporteren",				filtersReverse: "De filtering omdraaien",				filtersReverseInfo: "Filters omdraaien",				freeTextFilter: "Tekst filter",				freeTextFilterTooltip: "Aanvallen {filterType} de tekst wegfilteren",				freeTextFilterTooltipFilterTypeWith: "met",				freeTextFilterTooltipFilterTypeWithout: "zonder",				nobleFilter: "Alle edelaanvallen tonen",				nobleFilterRev: "Alle edelaanvallen wegfilteren",				spyFilter: "Alle verkenneraanvallen tonen",				spyFilterRev: "Alle verkenneraanvallen wegfilteren",				tableTotal: "Bevel ({0})",				fakeFilter: "Alle fake aanvallen wegfilteren",				fakeFilterRev: "Alle fake aanvallen tonen",				continentFilter: "Continent",				continentFilterTooltip: "Alle dorpen in continent wegfilteren",				continentFilterTooltipReverse: "Alle dorpen in continent tonen",				exportAttackHeader: "{village} {#} aanvallen, laatste [b]{lastAttack}[/b]",				exportDefenseHeader: "{village} {support#} ondersteuningen voor [b]{totalStack} pop[/b]",				exportCompleteHeader: "{village} {#} aanvallen, laatste [b]{lastAttack}[/b]\n+ {support#} ondersteuningen voor [b]{totalStack} pop[/b]"			},			groups: {				villageFilter: "Dorpsnaam",				villageFilterTitle: "Alle dorpen met de tekst in de dorpsnaam wegfilteren",				villageFilterTitleRev: "Alle dorpen met de tekst in de dorpsnaam tonen",				pointsFilter: "Punten",				amountFilter: "Aantal",				groupNameFilter: "Groepsnaam",				amountFilterTitle: "Alle dorpen met minder groepen wegfilteren",				amountFilterTitleRev: "Alle dorpen met meer groepen wegfilteren",				pointsFilterTitle: "Alle dorpen met minder punten wegfilteren",				pointsFilterTitleRev: "Alle dorpen met meer punten wegfilteren",				farmFilterTitle: "Alle dorpen met minder populatie wegfilteren",				farmFilterTitleRev: "Alle dorpen met meer populatie wegfilteren",				groupNameFilterTitle: "Alle dorpen met de tekst in een groepsnaam wegfilteren",				groupNameFilterTitleRev: "Alle dorpen met de tekst in een groepsnaam tonen"			},			snob: {				canProduce: "Je kan meteen produceren:"			},			profile: {				twStatsMap: "TWStats Kaart",				externalPage: "(Extern)",				internalPage: "(Intern)",				conquers: "Overnames",				villages: "Dorpen:",				graphPoints: "Punten",				graphVillages: "Dorpen",				graphOD: "OD Totaal",				graphODD: "OD Verdediging",				graphODA: "OD Aanval",				graphRank: "Rang",				graphMembers: "Leden",				graphTWMap: "TribalWarsMap.com"			},			infoVillage: {				toAttackGroupOnOwnTroopsOverview: "&raquo; Aanvalleuh!",				toDefenseGroupOnOwnTroopsOverview: "&raquo; Verdedigen!"			},			incomings: {				dynamicGrouping: "Dynamisch Groeperen",				summation: "Somlijn",				fastGrouping: "Snel Groeperen",				showNewIncomings: "Toon Nieuwe Aanvallen",				amount: "Aanvallen:"			},			activator: {				removeScriptWarning: "Niet meer tonen"			},			rest: {				sittingAttackTill: "Aanvallen en verdedigen van dorpen niet in eigen beheer tot:"			}		}	};		function pad(number, length) {		var str = '' + number;		while (str.length < length) {			str = '0' + str;		}		return str;	}		function getQueryStringParam(name, url) {		name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");		var regexS = "[\\?&]" + name + "=([^&#]*)";		var regex = new RegExp(regexS);		var results = regex.exec(url == undefined ? window.location.href : url);		if (results == null) {			return "";		} else {			return results[1];		}	}		function getUrlString(url, villageId) {		if (url.indexOf("?") == -1) {			var link = location.href.substr(0, location.href.indexOf("?"));			link += "?village=" + (villageId ? villageId : getQueryStringParam("village"));			var isSit = getQueryStringParam("t");			if (isSit) {				link += "&t=" + isSit;			}				if (url.indexOf("=") == -1) {				return link + "&screen=" + url;			} else {				return link + "&" + url;			}		} else {			return url;		}	}		function ajax(screen, strategy, opts) {		if (!server_settings.ajaxAllowed) {			alert("Ajax is not allowed on this server.");			return;		}				opts = $.extend({}, { villageId: false, contentValue: true, async: true }, opts);			$.ajax({			url: getUrlString(screen, opts.villageId),			async: opts.async,			success: function(text) {				text = opts.contentValue ? $("#content_value", text) : text;				strategy(text);			}		});	}		function spSpeedCookie(setter) {		if (setter == undefined) {			var speedCookie = pers.get("targetVillageSpeed");			if (speedCookie == '') {				speedCookie = 'ram';			}			return speedCookie;		} else {			if (setter.indexOf('_') == 4) {				setter = setter.substr(setter.indexOf('_') + 1);			}			pers.set("targetVillageSpeed", setter);			return setter;		}	}		function spTargetVillageCookie(setter) {		if (setter == undefined) {			return pers.get("targetVillageCoord");		} else {			pers.set("targetVillageCoord", setter);			return setter;		}	}		function getDistance(x1, x2, y1, y2, speed) {		var dist = {};		dist.fields = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));		dist.travelTime = dist.fields * (speed == '' ? world_data.unitsSpeed.unit_ram : world_data.unitsSpeed['unit_' + speed]);		dist.arrivalTime = getDateFromTW($("#serverTime").text(), true);		dist.arrivalTime.setTime(dist.arrivalTime.getTime() + (dist.travelTime * 60 * 1000));		dist.isNightBonus = isDateInNightBonus(dist.arrivalTime);			if (speed == 'snob' && dist.travelTime > world_config.maxNobleWalkingTime) {			dist.html = "<font color=red><b>" + twDurationFormat(dist.travelTime) + "</b></font>";			dist.isNightBonus = true;		} else {			var displayTime = twDateFormat(dist.arrivalTime);			if (speed != 'merchant' && dist.isNightBonus) {				displayTime = "<font color=red><b>" + displayTime + "</b></font>";			}			dist.html = twDurationFormat(dist.travelTime) + ' || ' + displayTime;		}		if (dist.fields == 0) {			dist.html = "";		}			return dist;	}		_gaq.push(['b._setAccount', 'UA-30075487-3']);	function trackClickEvent(action) {		trackEvent("ButtonClick", action);	}		function trackEvent(category, action, label) {		// category: clicks (downloads, ...)		// action: which button clicked		if (typeof label === 'undefined') {			label = getQueryStringParam("screen");			var mode = getQueryStringParam("mode");			if (mode) label += "-" + mode;		}				//_gaq.push(['b._setAccount', 'UA-30075487-3']);		//_gaq.push(['b._trackPageview']);		// _gat._getTrackerByName('b')._trackEvent("SanguPackage", "Loaded", "withGetB");		_gat._getTrackerByName('b')._trackEvent(category, action, label);	}		function resourceColoring() {		var storage = parseInt($("#storage").text(), 10);		var wood = $("#wood");		var iron = $("#iron");		var stone = $("#stone");			// Color resources		if (user_data.gsStorageShow) {			wood.add(iron).add(stone).each(function () {				var x = parseInt(this.innerHTML / storage * 10 - 1, 10);				$(this).css("background-color", user_data.gsStorageBackground[x]);			});		}		// Blink full resources		if (user_data.overviewBlinkResources) {			wood.add(iron).add(stone).filter(function () {				return parseInt(this.innerHTML, 10) == storage;			}).css({ "font-weight": "bolder", "color": "black" }).fadeOut().fadeIn();		}	}		function fillRallyPoint(units) {		var script = "";		$.each(world_data.units, function (i, v) {			if (units[v] != undefined && units[v] > 0) {				script += "document.forms[0]." + v + ".value=\"" + units[v] + "\";";			} else {				script += "document.forms[0]." + v + ".value=\"\";";			}		});			return script;	}		function getVillageFromCoords(str, looseMatch) {		// if str is "villageName (X|Y) C54" then the villageName could be something like "456-321"		// the regex then thinks that the villageName are the coords		// looseMatch is thus only true when it was the user entering str.		var targetMatch = looseMatch != undefined ? str.match(/(\d+)\D(\d+)/g) : str.match(/(\d+)\|(\d+)/g);		if (targetMatch != null && targetMatch.length > 0) {			var coordMatch = targetMatch[targetMatch.length - 1].match(/(\d+)\D(\d+)/);			var village = { "isValid": true, "coord": coordMatch[1] + '|' + coordMatch[2], "x": coordMatch[1], "y": coordMatch[2] };				village.validName = function () { return this.x + '_' + this.y; };			village.continent = function () { return this.y.substr(0, 1) + this.x.substr(0, 1); };				return village;		}		return { "isValid": false };	}		function buildAttackString(villageCoord, unitsSent, player, isSupport, seperator, minimum) {		if (minimum == undefined) {			minimum = 0;		}		if (seperator == undefined) {			seperator = " ";		}		var totalPop = 0;		var renamed = villageCoord == null ? "" : villageCoord + seperator;		var sent = "";		$.each(world_data.units, function (i, val) {			var amount = unitsSent[val];			if (amount != 0) {				if (val == "snob") {					renamed += trans.tw.units.names[val] + "! ";				}				else if (amount >= minimum) {					sent += ", " + trans.tw.units.shortNames[val] + "=" + amount;				}								totalPop += amount * world_data.unitsPositionSize[i];			}		});			if (player) {			renamed += '(' + player + ')' + seperator;		}		if (sent.length > 2) {			sent = sent.substr(2);		}			if (isSupport) {			sent += seperator + "(" + trans.sp.all.populationShort + ": " + formatNumber(totalPop) + ")";		}			return renamed + sent;	}		function calcTroops(units) {		// units is an array of numbers; keys are the unit names (without unit_)		var x = {};		x.totalDef = 0;			function removeElement(arr, element) {			var idx = arr.indexOf(element);			if (idx != -1) {				arr.splice(idx, 1);			}			return arr;		}			// heavy doesn't count in determining whether the village is def/off (since you got some crazy guys using hc as offense and defense:)		$.each(removeElement(world_data.units_def, 'heavy'), function (i, v) { x.totalDef += units[v] * world_data.unitsSize['unit_' + v]; });		x.totalOff = 0;		$.each(removeElement(world_data.units_off, 'heavy'), function (i, v) { x.totalOff += units[v] * world_data.unitsSize['unit_' + v]; });			x.isDef = x.totalDef > x.totalOff;		x.isScout = units.spy * world_data.unitsSize.unit_spy > x.totalDef + x.totalOff;		x.isMatch = function (type) { return (type == 'all' || (type == 'def' && this.isDef) || (type == 'off' && !this.isDef)); };			x.getSlowest = 			function () {				var slowest_unit = null;				$.each(world_data.units, function (i, v) {					if (units[v] > 0 && (slowest_unit == null || world_data.unitsSpeed["unit_" + slowest_unit] < world_data.unitsSpeed["unit_" + v])) {						slowest_unit = v;					}				});				return slowest_unit;			};			x.colorIfNotRightAttackType =			function (cell, isAttack) {				var isSet = false;				if (units.snob != undefined && units.snob > 0) {					if (isAttack) {						if (units.snob > 1) {							isSet = true;							cell.css("background-color", user_data.colors.error).css("border", "1px solid black");							cell.animate({									width: "70%",									opacity: 0.4,									marginLeft: "0.6in",									fontSize: "3em",									borderWidth: "10px"								}, 5000, function () {									// Animation complete.							});						} else {							return;						}					} else {						isSet = true;					}				}				else if (x.totalDef + x.totalOff < user_data.command.filterFakeMaxPop) {					// fake					return;				}					if (!isSet && (x.isScout || x.isMatch(isAttack ? 'off' : 'def'))) {					return;				}				cell.css("background-color", user_data.colors.error);			};					return x;	}			function stackDisplay(totalFarm, stackOptions) {		// TODO: this function is only used on main village overview		if (stackOptions == undefined) {			stackOptions = {};		}		var farmSize = game_data.village.buildings.farm * world_config.farmLimit;			var stackDesc = '<b>' + formatNumber(totalFarm);		if (stackOptions.showFarmLimit && world_config.farmLimit > 0) {			stackDesc += ' / ' + formatNumber(farmSize);		}			if (stackOptions.percentage) {			stackDesc += ' (' + stackOptions.percentage + ')</b>';		}			var bgColor = getStackColor(totalFarm, farmSize);		if (stackOptions.cell == undefined) {			return {				color: bgColor,				desc: stackDesc,				cssColor: "style='background-color:" + bgColor + "'"			};		} else {			stackOptions.cell.html(stackDesc);			if (!stackOptions.skipColoring) {				stackOptions.cell.css("background-color", bgColor);			}		}	}		function getStackColor(totalFarm, farmSize) {		var color = null;		if (world_config.farmLimit > 0) {			$.each(user_data.farmLimit.acceptableOverstack, function (index, val) {				if (color == null && totalFarm > farmSize * val) {					color = user_data.farmLimit.stackColors[index];					return false;				}			});				if (color != null) {				return color;			}					} else {			$.each(user_data.farmLimit.unlimitedStack, function (index, val) {				if (color == null && totalFarm > val) {					color = user_data.farmLimit.stackColors[index];				}			});				if (color != null) {				return color;			}		}			return "transparant";	}	var modernizr = (function () {		// Difference in capital letter with the Modernizr library		// So nothing will break should TW start making use of it		return {			localstorage: (function supports_html5_storage() {				try {					return 'localStorage' in window && window['localStorage'] !== null;				} catch (e) {					return false;				}			})()		};	})();		var pers;	(function (pers) {		function getWorldKey(key) {			return game_data.world + '_' + key;		}			function getCookie(key) {			key = getWorldKey(key);			return (function() {				var x, cooks, cookie;				if (document.cookie.match(/;/)) {					cooks = document.cookie.split("; ");					for (x = 0; x < cooks.length; x++) {						cookie = cooks[x];						if (cookie.match(key + "=")) {							return cookie.replace(key + "=", "");						}					}				} else {					if (document.cookie.match(key + "=")) {						return document.cookie.replace(key + "=", "");					}				}					return '';			})();		}				function getGlobal(key) {			if (modernizr.localstorage) {				var value = localStorage[key];				return typeof value === 'undefined' ? '' : value;			} else {				return getCookie(key);			}		}				function get(key) {			return getGlobal(getWorldKey(key));		}				function setCookie(key, value, expireMinutes) {			key = getWorldKey(key);			(function() {				var date_obj = new Date(),					time = date_obj.getTime();				if (typeof expireMinutes === 'undefined') {					time += 60 * 1000 * 24 * 356;				} else {					time += expireMinutes * 1000 * 60;				}				date_obj.setTime(time);					document.cookie = key + "=" + value + ";expires=" + date_obj.toGMTString() + ";";			})();		}				function setGlobal(key, value) {			if (modernizr.localstorage) {				localStorage[key] = value;			} else {				setCookie(key, value);			}		}				function set(key, value) {			setGlobal(getWorldKey(key), value);		}				pers.set = set;		pers.setCookie = setCookie;		pers.setGlobal = setGlobal;		pers.get = get;		pers.getCookie = getCookie;		pers.getGlobal = getGlobal;	})(pers || (pers = {}));	$.fn.sortElements = (function () {		var sort = [].sort;		return function (comparator, getSortable) {			getSortable = getSortable || function () { return this; };			var placements = this.map(function () {				var sortElement = getSortable.call(this),				parentNode = sortElement.parentNode,				// Since the element itself will change position, we have				// to have some way of storing its original position in				// the DOM. The easiest way is to have a 'flag' node:				nextSibling = parentNode.insertBefore(					document.createTextNode(''),					sortElement.nextSibling				);					return function () {					if (parentNode === this) {						throw new Error("You can't sort elements if any one is a descendant of another.");					}						// Insert before flag:					parentNode.insertBefore(this, nextSibling);					// Remove flag:					parentNode.removeChild(nextSibling);				};			});				return sort.call(this, comparator).each(function (i) {				placements[i].call(getSortable.call(this));			});		};	})();		// TODO: this function should be someplace else. It's not UI related.	$.fn.outerHTML = 		function () { 			return $('<div>').append(this.clone()).remove().html();		};		function createSpoiler(button, content, opened) {		return "<div id='spoiler'><input type='button' value='" + button + "' onclick='toggle_spoiler(this)' /><div><span style='display:" + (opened ? 'block' : 'none') + "'>" + content + "</span></div></div>";	}		function createMoveableWidget(id, title, content) {		return '<div id=' + id + '+ class="vis moveable widget"><h4><img style="float: right; cursor: pointer;"'				+ ' onclick="return VillageOverview.toggleWidget(\'' + id + '\', this);" src="graphic/minus.png">'				+ title + '</h4><div style="display: block;">' + content + '</div></div>';	}		function printCoord(village, desc) {		if (server_settings.coordinateLinkAllowed) {			return "<a href=# onclick=\"$('#inputx').val("+village.x+"); $('#inputy').val("+village.y+"); return false;\">" + desc + "</a>";		} else {			return "<b>" + desc + "</b> <input type=text onclick='this.select(); this.focus()' size=7 value='" + village.x + '|' + village.y + "'>";		}	}	var server_settings = {};	switch (game_data.market) {		case 'de':			server_settings = {				tw_version: 8.11,				maxSitDays: 60,				ajaxAllowed: false,				coordinateLinkAllowed: true			};			break;		default:			server_settings = {				tw_version: 8.11,				maxSitDays: 60,				ajaxAllowed: true,				coordinateLinkAllowed: false			};			break;	}	// Activate / deactivate the tool	var isSanguActive = pers.get("sanguActive") == "true";	if (location.href.indexOf('changeStatus=') > -1) {		isSanguActive = location.href.indexOf('changeStatus=true') > -1;		pers.set("sanguActive", isSanguActive);	}		var activatorImage = isSanguActive ? "green" : 'red';	var activatorTitle = (!isSanguActive ? trans.sp.sp.activatePackage : trans.sp.sp.deactivatePackage) + " (v" + sangu_version + ")";		if (isSanguActive) {		// Send usage statistics to GA once/day		var loginMonitor = pers.get("sanguLogin");		if (loginMonitor !== '') {			var parts = loginMonitor.match(/(\d+)/g);			loginMonitor = new Date(parts[0], parts[1]-1, parts[2]);						if (Math.abs(loginMonitor.getTime() - (new Date()).getTime()) > 1000 * 3600 * 24) {				loginMonitor = '';			}		}		if (loginMonitor === '') {			loginMonitor = new Date();			loginMonitor.setHours(0, 0, 0);			loginMonitor = loginMonitor.getFullYear() + '-' + pad(loginMonitor.getMonth()+1, 2) + '-' +  pad(loginMonitor.getDate(), 2);			trackEvent("UserScripts", "Startup", loginMonitor);			pers.set("sanguLogin", loginMonitor);		}				// Check compatibility with TW version		if (pers.getGlobal("scriptWarningVersion") != server_settings.tw_version) {			var sanguEmail = "sangu.be";			try {				ScriptAPI.register('Sangu Package', server_settings.tw_version, 'Laoujin', sanguEmail);			} catch (e) {				$("#script_list a[href='mailto:"+sanguEmail+"']").after(" &nbsp;<a href='' id='removeScriptWarning'>"+trans.sp.activator.removeScriptWarning+"</a>");				$("#removeScriptWarning").click(function() {					pers.setGlobal("scriptWarningVersion", server_settings.tw_version);				});			}		}	}		// gray icon when tw version doesn't match	if (pers.getGlobal("scriptWarningVersion") == server_settings.tw_version) {		activatorImage = "grey";		activatorTitle = trans.sp.sp.activatePackageWithCompatibility.replace("{version}", sangu_version);	}		$("#storage").parent()		.after(			"<td class='icon-box' nowrap><a href=" + location.href.replace("&changeStatus=" + isSanguActive, "") 			+ "&changeStatus=" + (!isSanguActive) + "><img src='graphic/dots/" + activatorImage 			+ ".png' title='" + activatorTitle 			+ "' /></a>&nbsp;</td>");		function createFixedTooltip(id, position, title, content) {		$("#content_value").after('<div id="' + id + '" class="vis" style="z-index: 100001; margin: 2px; width: 350px; display: block; position:absolute; top: '+position.top+'px; left: '+position.left+'px; border: 1px solid black; background-color: #F4E4BC">'				+ '<h4>' + '<img class="closeTooltip" style="float: right; cursor: pointer;" src="graphic/minus.png">' + title + '</h4>'				+ '<div style="display: block; text-align: left; margin: 2px;">' + content + '</div>'				+ '</div>');				$(".closeTooltip").click(function() {			$("#" + id).hide(); 			pers.setGlobal("sanguFirstRun", "1");		});	}		// First time run message - Position beneath resource/storage display	if (pers.getGlobal("sanguFirstRun") == '') {		if (isSanguActive) {			pers.setGlobal("sanguFirstRun", "1");					} else {			var position = $("#storage").position();			position = {left: position.left - 150, top: position.top + 35};			createFixedTooltip("sanguActivatorTooltip", position, "Sangu Package", trans.sp.sp.firstTimeRun);		}	}	    if (isSanguActive) {		var world_data = {};		// world config: global game settings		var world_config = {			hasMilitia: false,			nightbonus: {				active: false,				from: 0, 				till: 0				},			smithyLevels: true,			hasChurch: false,			hasArchers: false,			hasKnight: false,			speed: 1,			unitSpeed: 1,			farmLimit: 0,			minFake: 0,			hasMinFakeLimit: false,			coins: false,			maxNobleWalkingTime: 999		};				if (pers.get('worldconfig') !== '') {			world_config = JSON.parse(pers.get("worldconfig"));					} else {			// load new world through tw API			if (server_settings.ajaxAllowed) {				function world_config_setter_unit(configBag, unitInfoXml) {					configBag.hasMilitia = $("config militia", unitInfoXml).length !== 0;				}								function world_config_setter(configBag, infoXml) {					configBag.nightbonus = {						active: $("night active", infoXml).text() === "1",						from: parseInt($("night start_hour", infoXml).text(), 10),						till: parseInt($("night end_hour", infoXml).text(), 10)						};					configBag.smithyLevels = $("game tech", infoXml).text() === "1" || $("game tech", infoXml).text() === "0";					configBag.hasChurch = $("game church", infoXml).text() !== "0";					configBag.hasArchers = $("game archer", infoXml).text() !== "0";					configBag.hasKnight = $("game knight", infoXml).text() !== "0";					configBag.speed = parseFloat($("config speed", infoXml).text());					configBag.unitSpeed = parseFloat($("config unit_speed", infoXml).text());					configBag.farmLimit = parseInt($("game farm_limit", infoXml).text(), 10);					configBag.minFake = parseInt($("game fake_limit", infoXml).text(), 10) / 100;					configBag.hasMinFakeLimit = configBag.minFake > 0;					configBag.coins = $("snob gold", infoXml).text() === "1";					configBag.maxNobleWalkingTime = parseInt($("snob max_dist", infoXml).text(), 10) * configBag.speed * configBag.unitSpeed;				}								function world_config_getter(world) {					// world nl: http://nl16.tribalwars.nl/					// world de: http://de90.die-staemme.de/					if (typeof world === 'undefined') world = '';										var world_config = {};					$.ajax({						url: world + "interface.php?func=get_unit_info",						async: false,						success: function(xml) {							world_config_setter_unit(world_config, xml);						}					});									$.ajax({						url: world + "interface.php?func=get_config",						async: false,						success: function(xml) {							world_config_setter(world_config, xml);						}					});					return world_config;				}				world_config = world_config_getter();							} else {				// Not allowed to get data with ajax: need to store the configuration here				world_config = (function() {					switch (game_data.world) {						case 'de6':							world_data = {"hasMilitia":false,"nightbonus":{"active":true,"from":0,"till":7},"smithyLevels":true,"hasChurch":false,"hasArchers":false,"hasKnight":false,"speed":1,"unitSpeed":1,"farmLimit":0,"minFake":0.01,"hasMinFakeLimit":true,"coins":false,"maxNobleWalkingTime":70};							break;																																								}				})();			}						pers.set("worldconfig", JSON.stringify(world_config));		}		// world config		// RESOURCES		world_data.resources = ['holz', 'lehm', 'eisen'];		world_data.resources_en = ['wood', 'stone', 'iron'];				// BUILDINGS		world_data.buildingsSize =			[			["main", [5, 6, 7, 8, 9, 11, 13, 15, 18, 21, 24, 28, 33, 38, 45, 53, 62, 72, 84, 99, 116, 135, 158, 185, 216, 253, 296, 347, 406, 475]],			["barracks", [7, 8, 10, 11, 13, 15, 18, 21, 25, 29, 34, 39, 46, 54, 63, 74, 86, 101, 118, 138, 162, 189, 221, 259, 303]],			["stable", [8, 9, 11, 13, 15, 18, 21, 24, 28, 33, 38, 45, 53, 62, 72, 84, 99, 115, 135, 158]],			["garage", [8, 9, 11, 13, 15, 18, 21, 24, 28, 33, 38, 45, 53, 62, 72]],			["snob", [80, 94, 110]],			["smith", [20, 23, 27, 32, 37, 44, 51, 60, 70, 82, 96, 112, 132, 154, 180, 211, 247, 289, 338, 395]],			["place", [0]],			["market", [20, 23, 27, 32, 37, 44, 51, 60, 70, 82, 96, 112, 132, 154, 180, 211, 247, 289, 338, 395, 462, 541, 633, 740, 866]],			["wood", [5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 21, 24, 28, 33, 38, 43, 50, 58, 67, 77, 89, 103, 119, 138, 159, 183, 212, 245, 283, 326]],			["stone", [10, 11, 13, 15, 17, 19, 22, 25, 29, 33, 37, 42, 48, 55, 63, 71, 81, 93, 106, 121, 137, 157, 179, 204, 232, 265, 302, 344, 392, 447]],			["iron", [10, 12, 14, 16, 19, 22, 26, 30, 35, 41, 48, 56, 66, 77, 90, 105, 123, 144, 169, 197, 231, 270, 316, 370, 433, 507, 593, 696, 811, 949]],			["farm", [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],			["storage", [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],			["hide", [2, 2, 3, 3, 4, 4, 5, 6, 7, 8]],			["wall", [5, 6, 7, 8, 9, 11, 13, 15, 18, 21, 24, 28, 33, 38, 45, 53, 62, 72, 84, 99]]			];				world_data.buildingsPoints =			[			["main", [10, 12, 14, 17, 21, 25, 30, 36, 43, 52, 62, 74, 89, 107, 128, 145, 185, 222, 266, 319, 383, 460, 552, 662, 795, 954, 1145, 1648, 1978]],			["barracks", [16, 19, 23, 28, 33, 40, 48, 57, 69, 83, 99, 119, 143, 171, 205, 247, 296, 355, 426, 511, 613, 736, 883, 1060, 1272]],			["stable", [20, 24, 29, 35, 41, 50, 60, 72, 86, 103, 124, 149, 178, 214, 257, 308, 370, 444, 532, 639]],			["garage", [24, 29, 35, 41, 50, 60, 72, 86, 103, 124, 149, 178, 214, 257, 308]],			["snob", [512, 614, 737]],			["smith", [19, 23, 27, 33, 39, 47, 57, 68, 82, 98, 118, 141, 169, 203, 244, 293, 351, 422, 506, 607]],			["place", [0]],			["market", [10, 12, 14, 17, 21, 25, 30, 36, 43, 52, 62, 74, 89, 107, 128, 154, 185, 222, 266, 319, 383, 460, 552, 662, 795]],			["wood", [6, 7, 9, 10, 12, 15, 18, 21, 26, 31, 37, 45, 53, 64, 77, 92, 111, 133, 160, 192, 230, 276, 331, 397, 477, 572, 687, 824, 989, 1187]],			["stone", [6, 7, 9, 10, 12, 15, 18, 21, 26, 31, 37, 45, 53, 64, 77, 92, 111, 133, 160, 192, 230, 276, 331, 397, 477, 572, 687, 824, 989, 1187]],			["iron", [6, 7, 9, 10, 12, 15, 18, 21, 26, 31, 37, 45, 53, 64, 77, 92, 111, 133, 160, 192, 230, 276, 331, 397, 477, 572, 687, 824, 989, 1187]],			["farm", [5, 6, 7, 9, 10, 12, 15, 18, 21, 26, 31, 37, 45, 53, 64, 77, 92, 111, 133, 160, 192, 230, 276, 331, 397, 477, 572, 687, 824, 989]],			["storage", [6, 7, 9, 10, 12, 15, 18, 21, 26, 31, 37, 45, 53, 64, 77, 92, 111, 133, 160, 192, 230, 276, 331, 397, 477, 572, 687, 824, 989, 1187]],			["hide", [5, 6, 7, 9, 10, 12, 15, 18, 21, 26]],			["wall", [8, 10, 12, 14, 17, 20, 24, 29, 34, 41, 50, 59, 71, 86, 103, 123, 148, 177, 213, 256]]			];				world_data.buildings = ["main", "barracks", "stable", "garage"];		if (world_config.hasChurch) {			world_data.buildingsSize.push(["church", [5000, 7750, 12013]]);			world_data.buildingsSize.push(["church_f", [5]]);			world_data.buildings.push("church");		}		world_data.buildings = world_data.buildings.concat(["snob", "smith", "place"]);		if (world_config.hasKnight) {			world_data.buildingsSize.push(["statue", [10]]);			world_data.buildingsPoints.push(["statue", [24]]);			world_data.buildings.push("statue");		}		world_data.buildings = world_data.buildings.concat(["market", "wood", "stone", "iron", "farm", "storage", "hide", "wall"]);								// UNITS		world_data.unitsSize = { "unit_spear": 1, "unit_sword": 1, "unit_axe": 1, "unit_spy": 2, "unit_light": 4, "unit_heavy": 6, "unit_ram": 5, "unit_catapult": 8, "unit_snob": 100 };		world_data.unitsSpeed = { "unit_spear": 18, "unit_sword": 22, "unit_axe": 18, "unit_spy": 9, "unit_light": 10, "unit_heavy": 11, "unit_ram": 30, "unit_catapult": 30, "unit_snob": 35, "unit_merchant": 6 };				world_data.units_def = ["spear", "sword", "heavy"];		world_data.units_off = ["axe", "light", "heavy"];		if (!world_config.hasArchers && !world_config.hasKnight) {			world_data.unitsPositionSize = [1, 1, 1, 2, 4, 6, 5, 8, 100];			world_data.units = ["spear", "sword", "axe", "spy", "light", "heavy", "ram", "catapult", "snob"];		} else {			world_data.units = ["spear", "sword", "axe"];			world_data.unitsPositionSize = [1, 1, 1];			if (world_config.hasArchers) {				world_data.units_off.push("marcher");				world_data.units_def.push("archer");				$.extend(world_data.unitsSize, { "unit_archer": 1 }, { "unit_marcher": 5 });				$.extend(world_data.unitsSpeed, { "unit_archer": 18 }, { "unit_marcher": 10 });				world_data.units.push("archer");				world_data.unitsPositionSize.push(1);			}			world_data.units.push("spy");			world_data.unitsPositionSize.push(2);			world_data.units.push("light");			world_data.unitsPositionSize.push(4);			if (world_config.hasArchers) {				world_data.units.push("marcher");				world_data.unitsPositionSize.push(5);			}			world_data.units.push("heavy");			world_data.unitsPositionSize.push(6);			world_data.units.push("ram");			world_data.unitsPositionSize.push(5);			world_data.units.push("catapult");			world_data.unitsPositionSize.push(8);			if (world_config.hasKnight) {				$.extend(world_data.unitsSize, { "unit_knight": 10 });				$.extend(world_data.unitsSpeed, { "unit_knight": 10 });				world_data.units.push("knight");				world_data.unitsPositionSize.push(10);			}			world_data.units.push("snob");			world_data.unitsPositionSize.push(100);		}				// Unit speed adjustments		world_config.maxNobleWalkingTime *= world_data.unitsSpeed.unit_snob;		if (Math.round(world_config.speed * world_config.unitSpeed) != 1) {			var speedModifier = Math.round(world_config.speed * world_config.unitSpeed);			$.each(world_data.unitsSpeed, function (index, value) {				world_data.unitsSpeed[index] = world_data.unitsSpeed[index] / speedModifier;			});		}		function formatNumber(nStr) {			nStr += '';			var x = nStr.split('.');			var x1 = x[0];			var x2 = x.length > 1 ? '.' + x[1] : '';			var rgx = /(\d+)(\d{3})/;			while (rgx.test(x1)) {				x1 = x1.replace(rgx, '$1' + '.' + '$2');			}			return x1 + x2;		}		// DATETIME FUNCTIONS		function prettyDate(diff, showSeconds) {			diff = diff / 1000;			if (diff < 0) {				return "&nbsp;";			}			if (diff < 60) {				if (showSeconds) {					return diff + " " + trans.sp.tagger.sentSeconds;				}				return trans.sp.tagger.sentNow;			}			if (diff < 120) {				return trans.sp.tagger.sent1Minute;			}			if (diff < 3600) {				return Math.floor(diff / 60) + " " + trans.sp.tagger.sentMinutes;			}			if (diff < 7200) {				return trans.sp.tagger.sent1Hour + ", " + Math.floor((diff - 3600) / 60) + " " + trans.sp.tagger.sentMinutes;			}			return Math.floor(diff / 3600) + " " + trans.sp.tagger.sentHours + ", " + Math.floor((diff % 3600) / 60) + " " + trans.sp.tagger.sentMinutes;		}				function twDurationFormat(num) {			var days = 0;			if (user_data.displayDays) {				days = Math.floor(num / 1440);			}			num -= days * 1440;			var hours = Math.floor(num / 60);			num -= hours * 60;			var mins = Math.floor(num);			num -= mins;			var secs = Math.round(num * 60);					if (days > 0) {				return days + '.' + pad(hours, 2) + ':' + pad(mins, 2) + ':' + pad(secs, 2);			} else {				return pad(hours, 2) + ':' + pad(mins, 2) + ':' + pad(secs, 2);			}		}				function twDateFormat(dat, alwaysPrintFullDate, addYear) {			var day = dat.getDate();			var cur = new Date().getDate();					if (!alwaysPrintFullDate && day == cur) {				return trans.tw.all.today + " " + pad(dat.getHours(), 2) + ':' + pad(dat.getMinutes(), 2) + ':' + pad(dat.getSeconds(), 2);			}			else if (!alwaysPrintFullDate && day == cur + 1) {				return trans.tw.all.tomorrow + " " + pad(dat.getHours(), 2) + ':' + pad(dat.getMinutes(), 2) + ':' + pad(dat.getSeconds(), 2);			}			else if (addYear) {				return trans.tw.all.dateOn + " " + dat.getDate() + "." + pad(dat.getMonth() + 1, 2) + "." + (dat.getFullYear() + '').substr(2) + " " + pad(dat.getHours(), 2) + ':' + pad(dat.getMinutes(), 2) + ':' + pad(dat.getSeconds(), 2); // + "(" + dat.getFullYear() + ")";			} else {				return trans.tw.all.dateOn + " " + dat.getDate() + "." + pad(dat.getMonth() + 1, 2) + ". " + pad(dat.getHours(), 2) + ':' + pad(dat.getMinutes(), 2) + ':' + pad(dat.getSeconds(), 2); // + "(" + dat.getFullYear() + ")";			}		}				function getTimeFromTW(str) {			// NOTE: huh this actually returns the current date			// with some new properties with the "str" time			//17:51:31			var timeParts = str.split(":");			var seconds = timeParts[2];			var val = {};			val.hours = parseInt(timeParts[0], 10);			val.minutes = parseInt(timeParts[1], 10);			if (seconds.length > 2) {				var temp = seconds.split(".");				val.seconds = parseInt(temp[0], 10);				val.milliseconds = parseInt(temp[1], 10);			} else {				val.seconds = parseInt(seconds, 10);			}			val.totalSecs = val.seconds + val.minutes * 60 + val.hours * 3600;			return val;		}				function getDateFromTW(str, isTimeOnly) {			//13.02.11 17:51:31			var timeParts, seconds;			if (isTimeOnly) {				timeParts = str.split(":");				seconds = timeParts[2];				var val = new Date();				val.setHours(timeParts[0]);				val.setMinutes(timeParts[1]);				if (seconds.length > 2) {					var temp = seconds.split(".");					val.setSeconds(temp[0]);					val.setMilliseconds(temp[1]);				} else {					val.setSeconds(seconds);				}				return val;			} else {				var parts = str.split(" ");				var dateParts = parts[0].split(".");				timeParts = parts[1].split(":");				seconds = timeParts[2];				var millis = 0;				if (seconds.length > 2) {					var temp = seconds.split(".");					seconds = temp[0];					millis = temp[1];				} if (dateParts[2].length == 2) {					dateParts[2] = (new Date().getFullYear() + '').substr(0, 2) + dateParts[2];				}						return new Date(dateParts[2], (dateParts[1] - 1), dateParts[0], timeParts[0], timeParts[1], seconds, millis);			}		}				function getDateFromTodayTomorrowTW(str) {			var currentT = new Date();			var dateParts = [];			var parts = $.trim(str).split(" ");			if (str.indexOf(trans.tw.all.tomorrow) != -1) {				dateParts[0] = currentT.getDate() + 1;				dateParts[1] = currentT.getMonth();			} else if (str.indexOf(trans.tw.all.today) != -1) {				dateParts[0] = currentT.getDate();				dateParts[1] = currentT.getMonth();			} else {				dateParts = parts[1].split(".");				dateParts[1] = parseInt(dateParts[1], 10) - 1;			}					var timeParts = parts[parts.length - 2].split(":");			var seconds = timeParts[2];			var millis = 0;			if (seconds.length > 2) {				var temp = seconds.split(".");				seconds = temp[0];				millis = temp[1];			}					return new Date(new Date().getFullYear(), dateParts[1], dateParts[0], timeParts[0], timeParts[1], seconds, millis);		}				function isDateInNightBonus(date) {			if (!world_config.nightbonus.active) return false;			return date.getHours() >= world_config.nightbonus.from && date.getHours() < world_config.nightbonus.till;		}		function getBuildingSpace() {			var total = 0;			for (var building = 0; building < world_data.buildingsSize.length; building++) {				var b = world_data.buildingsSize[building];				if (parseInt(game_data.village.buildings[b[0]], 10) > 0) {					total += b[1][parseInt(game_data.village.buildings[b[0]], 10) - 1];				}			}			return total;		}				function getBuildingPoints() {			var total = 0;			for (var building = 0; building < world_data.buildingsPoints.length; building++) {				var b = world_data.buildingsPoints[building];				if (parseInt(game_data.village.buildings[b[0]], 10) > 0) {					total += b[1][parseInt(game_data.village.buildings[b[0]], 10) - 1];				}			}			return total;		}				function createMapJumpLink(name, x, y) {			var loc = location.href;			if (loc.indexOf("&") > -1) {				loc = loc.substr(0, loc.indexOf("&") + 1);			}			else if (loc.indexOf("?") == -1) {				loc += "?";			}			return "<a href='" + loc + "screen=map&x=" + x + "&y=" + y + "' class=sangujumperlink coordx=" + x + " coordy=" + y + ">" + name + " (" + x + "|" + y + ")</a>";		}				function mapJump() {			if (user_data.jumper.enabled) {				var cell = "<span style='display: none;' id=sanguJumperFrame>";				cell += "<input type=text type=text size=6 id=sangujumper style='height: 16px; border: 0; top: -2px; position: relative'>";				cell += "</span>";				cell += "&nbsp;<a href=# id=sangujumperOpen><span class='icon ally internal_forum' title='" + trans.sp.jumper.goToMap + "'></span></a>";				$("#menu_row2").append("<td>" + cell + "</td>");								$("#sangujumper").keyup(function (e) {					if (e.which == 13) {						$("#sangujumperOpen").click();					}				});						$("#sangujumperOpen").click(function () {					trackClickEvent("JumperOpen");					var input = $("#sangujumper");					if ($("#sanguJumperFrame").is(":visible")) {						var village = getVillageFromCoords(input.val(), true);						if (village.isValid) {							// Jump to coordinates on the map							location.href = location.href.substr(0, location.href.indexOf("&screen")) + "&screen=map&x=" + village.x + "&y=" + village.y;						} else {							// incorrect coordinates							if (!$("#sangujumperpos").is(":visible")) {								$("#sangujumperpos").show();								input.css("border", "1px solid red");							} else								$("#sangujumperpos").hide();						}					} else {						// activate mapJumper						var input = $("#sangujumper");						if (input.val() == "") {							$("#sanguJumperFrame").fadeIn();						} else {							$("#sanguJumperFrame").show();							$("#sangujumperOpen").click();						}					}										return false;				});								if (user_data.jumper.autoShowInputbox) {					$("#sangujumperOpen").click();				}			}		}				function q(what) { console.log(typeof what === "undefined" ? "yaye" : what); }				function qa(what) { alert(typeof what === "undefined" ? "yaye" : what); }				/*function getStopWatch(toTime, alertIt) {			var watch = { start: new Date(), text: toTime };			watch.getTime = function () { return ((new Date()).getTime() - this.start.getTime()); };			watch.reset = function () { this.start = new Date(); };			watch.print = function () { if (alertIt != undefined && alertIt) alert(this.text + ': ' + this.getTime()); };					//if (alertIt != undefined && alertIt) alert('Start:' + toTime + ':' + watch.start);			return watch;		}*/        // BEGIN PAGE PROCESSING		// MAIN VILLAGE OVERVIEW         if (location.href.indexOf('screen=overview') > -1 && location.href.indexOf('screen=overview_villages') == -1) {            var content_value = $("#content_value");            var slowest_unit = null;			// calculate current stack			var totalUnits = [];			var totalFarm = 0;			var unitTable = $("#show_units");			$("#show_units > h4").prepend(trans.sp.main.unitsReplacement);			$("table:first td", unitTable).not(":last").each(function () {				var unit = $('img', this)[0].src;				unit = unit.substr(unit.lastIndexOf('/') + 1);				unit = unit.substr(0, unit.lastIndexOf('.'))				var unitsSize = world_data.unitsSize[unit];				var unitAmount = $('strong', this);				unitAmount[0].id = "spAmount" + unit;				unitAmount = unitAmount[0].innerHTML				totalUnits[unit] = unitAmount;				totalFarm += unitsSize * unitAmount;								if (slowest_unit == null || world_data.unitsSpeed[slowest_unit] < world_data.unitsSpeed[unit]) {					slowest_unit = unit;				}			});						// fetch own troops			if (user_data.ajaxSeperateSupport && totalFarm > 0) {				var ownFarmTotal = 0;				var supportRows = "";				if (server_settings.ajaxAllowed) {					ajax("place",						function (placeText) {							if (placeText.find(".unitsInput").size() > 0) {								slowest_unit = null;								placeText.find(".unitsInput").each(function () {									// separate own / supporting troops									var unit = 'unit_' + this.id.substr(this.id.lastIndexOf("_") + 1);									var unitAmount = $(this).next().text().substr(1);									unitAmount = parseInt(unitAmount.substr(0, unitAmount.length - 1), 10);									var unitsSize = world_data.unitsSize[unit];									ownFarmTotal += unitsSize * unitAmount;												var unitLabel = $("#spAmount" + unit);									var supportingTroopsAmount = totalUnits[unit] - unitAmount;									if (supportingTroopsAmount > 0) {										var unitDesc = $.trim(unitLabel.parent().text());										unitDesc = unitDesc.substr(unitDesc.indexOf(" ") + 1);										supportRows += "<tr><td>" + unitLabel.prev().outerHTML() + " <b>" + formatNumber(supportingTroopsAmount) + "</b> " + unitDesc + "</td></tr>";									}												if (unitAmount > 0) {										unitLabel.text(unitAmount);										if (slowest_unit == null || world_data.unitsSpeed[slowest_unit] < world_data.unitsSpeed[unit]) {											slowest_unit = unit;										}									} else {										unitLabel.parent().parent().hide();									}								});														} else {								ownFarmTotal = totalFarm; // No rally point							}						}, {async: false});										} else {					ownFarmTotal = totalFarm; // No ajax				}									if (slowest_unit != null) {					$("#slowestUnitCell").html("<img title='"+trans.sp.tagger.slowestTip+"' src='graphic/unit/" + slowest_unit + ".png'>").attr("slowestUnit", slowest_unit);				}							if (ownFarmTotal > 0 && user_data.ajaxSeperateSupportStacks) {					// stack in the village					var ownSupportDisplay = stackDisplay(ownFarmTotal);					unitTable.find("table:first").append("<tr><td><img src=graphic/face.png title='" + trans.sp.main.ownStackTitle + "'> " + ownSupportDisplay.desc + "</td></tr>");				}				if (totalFarm - ownFarmTotal > 0) {					// stack from other villages					var newTable = "<table class=vis width='100%'>";					supportRows += "<tr><td><a href='" + getUrlString("screen=place&mode=units") + "'>&raquo; " + trans.sp.main.rallyPointTroops + "</a></td></tr>";					if (user_data.ajaxSeperateSupportStacks) {						var supportDisplay = stackDisplay(totalFarm - ownFarmTotal, { showFarmLimit: true });						supportRows += '<tr><td style="border-top: 1px solid #85550d ;background-color: ' + supportDisplay.color + '">' + '<b>' + trans.tw.all.farm + ': ' + supportDisplay.desc + '</b>' + '</td></tr>';					}								unitTable.after(createMoveableWidget("os_units", trans.sp.main.unitsOther, newTable + supportRows + "</table>"));				}							// total stack				var isClassicOverview = $("a:contains('" + trans.tw.main.toGraphicOverview + "')", content_value).size() > 0;				if (isClassicOverview) {					var cell = $("#order_level_farm").parent().next();					var percentage = world_config.farmLimit == 0 ? "" : cell.children().html();					stackDisplay(						totalFarm, {							showFarmLimit: true,							percentage: percentage.substr(0, percentage.indexOf('%') + 1),							cell: cell						});							} else {					var stackDetails = stackDisplay(						totalFarm, {							showFarmLimit: true,							percentage: $("#l_farm strong").first().html()						});					//var cellContent = '<tr><td style="border-top: 1px solid #85550d ;background-color: ' + stackDetails.color + '">' + '<b>' + trans.tw.all.farm + ': ' + stackDetails.desc + '</b>' + '</td></tr>';					var cellContent = ' | <b>' + trans.tw.all.farm + ': ' + stackDetails.desc + '</b>';					$("#show_units tbody:first td:last").append(cellContent).css("border-top", "1px solid #85550d").css("background-color", stackDetails.color);				}			}			// Incoming/outgoing attacks			var mainTable = $("#overviewtable");			var incomingTable = $("#show_incoming_units table.vis:first");			var outgoingTable = $("#show_outgoing_units");			if (incomingTable.size() == 1 || outgoingTable.size() == 1) {				if (incomingTable.size() == 1) {					// tagger - add header					if (user_data.mainTagger.inputBoxWidth != null) {						$("input[type='button']", incomingTable).prev().width(user_data.mainTagger.inputBoxWidth);					}					if (user_data.mainTagger.active && incomingTable.has("img[src*='attack.png']").size() != 0) {						$("th:first", incomingTable).append("<input type=button value='" + trans.sp.tagger.openButton + "' id=openTaggerButton>");						$("#openTaggerButton").click(function () {							$(this).hide();										incomingTable.click(function (e) {								if (e.target.nodeName === 'IMG') {									var direction = $(e.target).attr("direction");									if (direction.length > 0) {										var rowIndex = parseInt($(e.target).attr("rowIndex"), 10);										direction = direction == "up";										$("input.incAt", incomingTable).each( function () {											var rowIndexAttributeValue = parseInt($(this).attr("rowIndex"), 10);											if ((direction && rowIndexAttributeValue <= rowIndex) || (!direction && rowIndexAttributeValue >= rowIndex)) {												$(this).attr("checked", true);											} else {												$(this).attr("checked", false);											}										});									}								}							});										var rows = $("tr", incomingTable);							var dodgeMenu = "<tr><td>";							dodgeMenu += '<img src="graphic/command/support.png" alt="" id="checkSupport" title="' + trans.sp.tagger.checkAllSupport + '" />';							dodgeMenu += "&nbsp;";							dodgeMenu += '<img src="graphic/command/return.png" alt="" id="uncheckSupport" title="' + trans.sp.tagger.uncheckAllSupport + '" />';							dodgeMenu += "<th colspan=3><input type=checkbox id=prefixInput>" + trans.sp.tagger.prefix;							dodgeMenu += " | ";							dodgeMenu += trans.sp.tagger.renameTo + "<input type=textbox doPrefix='false' size=30 id=commandInput value='" + user_data.mainTagger.defaultDescription + "'></th>";							dodgeMenu += "<th>" + trans.sp.tagger.slowest + "</th>";							dodgeMenu += "</td>";							dodgeMenu += "<td colspan=1 id=slowestUnitCell>";							if (slowest_unit != null) {								dodgeMenu += "<img title='"+trans.sp.tagger.slowestTip+"' src='graphic/unit/" + slowest_unit + ".png' slowestunit='" + slowest_unit + "'>";							}							dodgeMenu += "</td></tr>";							incomingTable.find("tbody:first").prepend(dodgeMenu);							$("#prefixInput").change(function () { 								$("#commandInput").attr("doPrefix", $(this).attr("checked") == "checked");							});										// checkbox manipulation							$("#uncheckSupport").click(function () {								$("input.incSupport", incomingTable).attr("checked", false);							});										$("#checkSupport").click(function () {								$("input.incSupport", incomingTable).attr("checked", true);							});										function isDefaultTagName(currentDesc) {								if (user_data.mainTagger.defaultDescription == currentDesc) {									return true;								}								else if (user_data.mainTagger.otherDescriptions != null && user_data.mainTagger.otherDescriptions != false) {									var isDefault = false;									$.each(user_data.mainTagger.otherDescriptions,function (index, val) {										if (val.name == currentDesc || user_data.mainTagger.prefix + val.name == currentDesc) {											isDefault = true;										}									});									return isDefault;								}								return false;							}										var buttonParent = $("#commandInput").parent();							function renameCommand(commandName, addPrefix) {								if (addPrefix == "true") {									commandName = user_data.mainTagger.prefix + commandName;								} 								else if (addPrefix != "false") {									commandName = prefix + commandName;								}											var dodgeCell = null;								$("input.taggerCheckbox", incomingTable).each(function () {									if ($(this).attr("checked")) {										dodgeCell = $(this).parent();										var button = dodgeCell.next().find("input[type='button']");										button.prev().val(commandName);										button.click();									}								});											if (dodgeCell != null) {									var unitSpeed = $("#slowestUnitCell img").attr("slowestunit");									if (unitSpeed != undefined) {										dodgeCell = dodgeCell.parent().find("td").last().prev();										pers.setCookie("sanguDodge" + getQueryStringParam("village"), unitSpeed + "~" + dodgeCell.text(), user_data.mainTagger.minutesDisplayDodgeTimeOnMap);													$(".dodgers", incomingTable).css("background-color", "").attr("title", "");										dodgeCell.css("background-color", user_data.colors.good).attr("title", trans.sp.tagger.activeDodgeTime);									}								}							}										// std tag button							var button = $("<input type=button title='" + trans.sp.tagger.renameTooltip + "' value='" + trans.sp.tagger.rename + "' onclick='select();'>");							button.click(function () {								trackClickEvent("MainTagger-CustomRename");								var tagName = $("#commandInput").val();								var pref = $("#commandInput").attr("doPrefix");								renameCommand(tagName, pref);							});							buttonParent.append(button);										if (user_data.mainTagger.otherDescriptions != null && user_data.mainTagger.otherDescriptions != false) {								// custom buttons								$.each(user_data.mainTagger.otherDescriptions, function (index, val) {									var button = $("<input type=button doPrefix='" + val.prefix + "' value='" + val.name + "'>").click(										function () {											// Cannot use input:checked : this works for Firefox but there is a bug in Opera											trackClickEvent("MainTagger-ConfigRename");											var tagName = $(this).attr("value");											var prefix = $(this).attr("doPrefix");											renameCommand(tagName, prefix);										});									buttonParent.append(button);								});							}										// add checkboxes							var lastRowIndex = rows.size();							var lastSend = 0;							var prevSendTime = 0;							var firstNight = true;							var amountOfAttacks = 0;							rows.each(function (rowIndex, rowValue) {								var row = $(rowValue);								if (rowIndex == 0) {									// headerrow									var header = "<td width=1% nowrap>";									header += "<img src='graphic/command/attack.png' title='" + trans.sp.tagger.checkAllAttacks + "' id=checkAll>&nbsp;<img src='graphic/command/cancel.png' title='" + trans.sp.tagger.uncheckAllAttacks + "' id=uncheckAll>";									header += "</td>";												row.replaceWith("<tr>" + header + "<th width='68%'>" + trans.sp.tagger.incomingTroops + "</th><th width='30%'>" + trans.sp.tagger.arrival + "</th><th width='10%'>" + trans.sp.tagger.arrival + "</th><th width=10% nowrap>" + trans.sp.tagger.dodgeTime + "</th><th width='1%'>&nbsp;</th>" + "</tr>");												$("#checkAll").click(function () {										$("input.incAt", incomingTable).attr("checked", true);									});												$("#uncheckAll").click( function () {										$("input.incAt", incomingTable).attr("checked", false);									});																	} else {									// non header row types									if (row.find("th").size() != 0) {										// this part is only executed when attacks can be ignored										// select all checkbox row (right above link rows)										$("th:first", row).replaceWith("<th><input type=checkbox id=selectAllIgnore> " + $("th:first", row).text() + "</th>");										$("#selectAllIgnore").click(function () {											var ingoreBoxes = $("input[name^='id_']", incomingTable);											var isChecked = $("#selectAllIgnore").attr("checked") == "checked";											ingoreBoxes.each(function() {												$(this).attr("checked", isChecked);											});										});													row.prepend("<td title='" + trans.sp.tagger.totalAttacksOnVillage + "' align=center><b># " + amountOfAttacks + "</b></td>").find("td:last").attr("colspan", 4);																			} else if (row.find("td").size() == 1) {										// link-rows (bottom)										if ($("#switchModus").size() == 0) {											if ($("#selectAllIgnore").size() == 0) {												// attack hiding disabled in tw settings -> there is not yet a totalrow												row.prepend("<td title='" + trans.sp.tagger.totalAttacksOnVillage + "' align=center><b># " + amountOfAttacks + "</b></td>");											}											else row.prepend("<td>&nbsp;</td>")														row.before("<tr><td>&nbsp;</td><td colspan=5><a href='' id=switchModus>" + trans.sp.tagger.switchModus + "</a></td></tr>");											$("#switchModus").click(function () {												trackClickEvent("MainTagger-OpenClose");												var attackRows = $("input.incAt", incomingTable).parent().parent();												if (attackRows.first().find("span:first").is(":visible")) {													attackRows.find("span:first").hide().next().show();												} else {													attackRows.find("span:first").show().next().hide();												}												return false;											});										}										else row.prepend("<td>&nbsp;</td>");										row.find("td:last").attr("colspan", 5);									} else {										// normal incoming rows										var checkboxCell = "<td><input type=checkbox rowIndex=" + rowIndex + " class='taggerCheckbox ";										var incomingType = $("img[src*='graphic/command/support.png']", this).size() == 1 ? 'incSupport' : "incAt";										checkboxCell += incomingType + "'";										if (rowIndex == 1) {											checkboxCell += " id=checkFirst";										}													var currentArrivalTime = getDateFromTodayTomorrowTW($("td:eq(1)", this).text());										if (incomingType == 'incAt' && isDateInNightBonus(currentArrivalTime)) {											// nightbonus											row.find("td:eq(1)").css("background-color", user_data.colors.error);										}													// extra column with dodge time										if (incomingType == 'incAt') {											var dodgeTime = getTimeFromTW($("td:eq(2)", this).text());											row.find("td:last").before("<td class=dodgers>" + twDurationFormat(dodgeTime.totalSecs / 2 / 60) + "</td>");											amountOfAttacks++;										} else {											row.append("<td>&nbsp;</td>");										}													// dotted line after x hours no incomings										if (prevSendTime == 0 || (currentArrivalTime - prevSendTime) / 1000 / 60 > user_data.mainTagger.minutesWithoutAttacksDottedLine) {											if (prevSendTime != 0) {												row.find("td").css("border-top", "1px dotted black");											}																						prevSendTime = currentArrivalTime;										}																				// black line after each nightbonus										if (lastSend == 0 || currentArrivalTime > lastSend) {											if (lastSend != 0) {												row.find("td").css("border-top", "1px solid black");												firstNight = false;											}														lastSend = new Date(currentArrivalTime);											if (lastSend.getHours() >= world_config.nightbonus.till) {												lastSend.setDate(lastSend.getDate() + 1);												lastSend.setHours(world_config.nightbonus.from);												lastSend.setMinutes(0);												lastSend.setSeconds(0);											} else if (lastSend.getHours() < world_config.nightbonus.from) {												lastSend.setHours(world_config.nightbonus.from);												lastSend.setMinutes(0);												lastSend.setSeconds(0);											} else {												lastSend.setHours(world_config.nightbonus.till);												lastSend.setMinutes(0);												lastSend.setSeconds(0);											}										}													// Automatically select?										if (incomingType == "incAt") {											if (firstNight) {												var isDefaultDesc = false;												if (!isDefaultDesc) {													checkboxCell += " checked=true";												}											}														$("span:eq(2)", row).find("input:first").click(function () {												$(this).select();											});														// extra buttons											$("td:eq(0)", row).append("<img src='graphic/oben.png' title='" + trans.sp.tagger.allAbove + "' rowIndex=" + rowIndex + " direction='up'> <img src='graphic/unten.png' title='" + trans.sp.tagger.allBelow + "' rowIndex=" + rowIndex + " direction='down'>");										}													row.prepend(checkboxCell + "></td>");													if (user_data.colorSupport != null && incomingType != "incAt") {											row.find("td").css("background-color", user_data.colorSupport);										}									}								}							});						});					}				}							// show tagger?				if (user_data.mainTagger.autoOpen) {					$("#openTaggerButton").click();				}								// Show attack rename inputboxes 				if (user_data.mainTagger.autoOpenCommands) {					$("#switchModus").click();				}							var newLayout = "<tbody><tr><td colspan=2><div class='outerBorder' id=myprettynewcell>";				newLayout += "</div></td></tr></tbody>";				mainTable.append(newLayout);							var prettyCell = $("#myprettynewcell");				prettyCell.append($("#show_incoming_units"));				prettyCell.append($("#show_outgoing_units"));			}        }				// MAP        else if (location.href.indexOf("screen=map") > -1) {			var isDodge = pers.getCookie("sanguDodge" + getQueryStringParam("village"));			if (isDodge) {				// Display dodge time and slowest unit in the village (cookied from the mainTagger)				isDodge = isDodge.split("~");				var header = $("#content_value h2:first");				$("#content_value tbody:first")					.prepend(						"<tr><td><table width=100% cellpadding=0 cellspacing=0><tr><td width=99% style='font-size: 18pt'><b>" + header.html() 						+ "</b></td><td nowrap width=250><div title='" + trans.sp.map.dodgeLastTagged + "' style='border: 1px solid black; padding: 2px; background-color: " 						+ (isDodge[0] == 'unit_snob' ? user_data.colors.special : user_data.colors.good) + "'><img src=graphic/unit/" + isDodge[0] + ".png> <b>" + isDodge[1] 						+ "</b></div></td></tr></table></td></tr>");				header.remove();			}        }		// REPORT PUBLISH        else if (location.href.indexOf('screen=report') > -1 && location.href.indexOf('mode=publish') > -1) {            //<!--@@INCLUDE "page\report.js" //-->        }		// MAIN        else if (location.href.indexOf('screen=main') > -1) {			// Alternating row colors			$("#buildings,#build_queue").find("tr:odd").addClass("row_b");			if (user_data.villageName != null && user_data.villageName.length > 0) {				var showButtons = true;				$.each(user_data.villageName, function (i, v) { if (game_data.village.name == v) showButtons = false; });							if (showButtons) {					var submitButton = $("input[type='submit']:last");					$.each(user_data.villageName, function (i, v) {						// rename village to one of the provided user_data.villageName options						var button = $("<input type=button value='" + v + "'>")							.click(function () {								trackClickEvent("RenameVillage");								$("input[name='name']").val(v);								if (user_data.villageNameClick) {									$("input[type='submit']").click();								}							});						var input = submitButton.parent().append(button);					});				}			}			// show loyalty when building			// destroy button is disabled now (but for how long?)			if (server_settings.ajaxAllowed && user_data.ajaxLoyalty) {				ajax("overview", function (overview) {					var loyalty = $("#show_mood div.vis_item", overview);					if (loyalty.size() == 1) {						$(".modemenu tr:first").append("<td><b>" + trans.tw.main.loyaltyHeader + "</b> " + loyalty.html() + "</td>");					}				});			}        }		// SNOB        else if (location.href.indexOf('screen=snob') > -1 && location.href.indexOf('mode=reserve') == -1) {			if (user_data.calculateSnob && !world_config.coins) {				// Calculate for how many nobles/snobs we've got packages				var table = $("#content_value table.vis:eq(1)");				var cost = $("td:eq(1)", table).html();				cost = parseInt(cost.substr(0, cost.indexOf(" ")), 10);				var stored = $("tr:eq(1) td:eq(1)", table).html();				stored = parseInt(stored.substr(0, stored.indexOf(" ")), 10);				var canProduce = 0;				while (stored > cost) {					stored -= cost;					cost++;					canProduce++;				}							var sumtable = $("table.main table.vis:last");				sumtable.append("<tr><th>" + trans.sp.snob.canProduce + "</th><td style='border: 1px solid black'><img src='/graphic/unit/unit_snob.png'><b>" + canProduce + "</b> + <img src='graphic/res.png'>" + stored + "</td></tr>");			}        }		// COMMAND INFO        else if (location.href.indexOf('screen=info_command') > -1) {			if ($("#running_times").size() > 0) {				// ---------------------------------------INCOMING ATTACK				var link = $("#contentContainer tr:eq(10) a:last");				link.one('click', function () {					var infoTable = $("#contentContainer");					var table = $("#running_times");								// convert runningtime to seconds					// TODO: there is a function for this: getTimeFromTW					function convertTime(cell) {						var time = $(cell).find("td:eq(1)").text();						time = time.match(/(\d+):(\d+):(\d+)/);									var obj = {};						obj.hours = parseInt(time[1], 10);						obj.minutes = parseInt(time[2], 10);						obj.seconds = parseInt(time[3], 10);						obj.totalSeconds = obj.hours * 3600 + obj.minutes * 60 + obj.seconds;									return obj;					}								// Sort op runningtime					var unitRows = $("tr:gt(1)", table);					unitRows.sortElements(function (a, b) {							return convertTime(a).totalSeconds > convertTime(b).totalSeconds ? 1 : -1;						});								// header sent times					$("th:first", table).attr("colspan", 5);					$("th:eq(2)", table).after("<th>" + trans.sp.tagger.sentOn + "</th><th>" + trans.sp.tagger.ago + "</th>");								var infoCell = $("td", infoTable);					var attacker = infoCell.eq(5).text();					var attackerVillageName = infoCell.eq(7).text();					var attackerVillage = getVillageFromCoords(attackerVillageName);					var defender = infoCell.eq(10).text();					var defenderVillage = getVillageFromCoords(infoCell.eq(12).text());					var arrivalTime = getDateFromTW(infoCell.eq(14).text());					var fields = parseInt(getDistance(attackerVillage.x, defenderVillage.x, attackerVillage.y, defenderVillage.y).fields, 10);								var isNightbonus = isDateInNightBonus(arrivalTime);					if (isNightbonus) {						infoCell.eq(14).css("background-color", user_data.colors.error);					}								var remainingRunningTime = convertTime($("tr:eq(9)", infoTable));					var toFocusButton = null;					unitRows.each(function () {						var unit = $("img:first", this).attr("src");						unit = unit.substr(unit.lastIndexOf("unit_") + 5);						unit = unit.substr(0, unit.indexOf("."));									if (unit == "spear") {							$(this).hide();						} else {							var runningTime = convertTime(this);							var newDate = new Date(arrivalTime.getTime() - runningTime.totalSeconds * 1000);							var sendAt = prettyDate((new Date()).getTime() - newDate.getTime());										// Extra column with time sent							$("td:eq(2)", this).before("<td>" + twDateFormat(newDate, true) + "</td><td>" + sendAt + "</td>");										// Possible send times (now) in bold							if (runningTime.totalSeconds > remainingRunningTime.totalSeconds) {								if (toFocusButton == null) {									toFocusButton = $("input:last", this);												$("#content_value table:first").prepend("<input type=submit id=focusPlaceHolder value='" + trans.sp.tagger.tagIt + " (" + trans.tw.units.names[unit] + ")'>");									$("#focusPlaceHolder").click(function () {										trackClickEvent("TagDefault");										toFocusButton.click();										$(this).val(trans.sp.tagger.tagged).attr("disabled", "disabled");									});												if (unit == "snob") {										$("tr:last td", table).css("background-color", user_data.colors.error)									}								}								$(this).css("font-weight", "bold");							}										// Rename default command name							if (user_data.incoming.renameInputTexbox) {								var str = user_data.incoming.renameInputTexbox;								unit = trans.tw.units.shortNames[unit];											var attackId = $("input:eq(1)", this).parent().html();								attackId = attackId.substr(attackId.lastIndexOf("id=") + 3);								attackId = attackId.substr(0, attackId.indexOf("'"));											str = str.replace("{village}", attackerVillageName).replace("{c}", attackerVillage.continent()).replace("{id}", attackId);								str = str.replace("{player}", attacker).replace("{xy}", attackerVillage.coord).replace("{unit}", unit);								str = str.replace("{fields}", fields);								if (str.indexOf("{night}") != -1) {									if (isNightbonus) {										str = str.replace("{night}", trans.sp.tagger.arrivesInNightBonus);									} else {										str = str.replace("{night}", "");									}								}								$(this).find("input:first").val(str);							}						}					});								// nobles can only walk so far					var nobles = $("tr:last", table);					if (convertTime(nobles).totalSeconds / 60 > world_config.maxNobleWalkingTime) {						nobles.find("td").css("text-decoration", "line-through");					}								if (user_data.incoming.invertSort)						unitRows.sortElements(function (a, b) {							return convertTime(a).totalSeconds < convertTime(b).totalSeconds ? 1 : -1;						});								// auto-show input textboxes					$("span:odd", table).show();					$("span:even", table).hide();				});							// TAGGER				if (user_data.incoming.forceOpenTagger || (user_data.incoming.autoOpenTagger && $("#labelText").text() == trans.tw.incoming.defaultCommandName)) {					link.click();				}							if (user_data.proStyle && user_data.incoming.villageBoxSize != null && user_data.incoming.villageBoxSize != false) {					$("#content_value table:first").css("width", user_data.incoming.villageBoxSize);				}								} else {				// Own attack/support/return ---------------------------------------------------------------------------------- Own attack/support/return				var table = $("#content_value");				var infoTable = $("table.vis:first", table);				var type = $("h2:first", table).text();				var catapultTargetActive = infoTable.find("tr:eq(5) td:eq(0)").text() == trans.tw.command.catapultTarget;							infoTable.width(600);							// Add troop returntime and annulation return time				var isSupport = type.indexOf(trans.tw.command.support) == 0;				var offset = 5;				if (catapultTargetActive) {					offset += 1;				}				var arrivalCell = infoTable.find("tr:eq(" + (offset + 1) + ") td:last");							if (type.indexOf(trans.tw.command.returnText) == -1 					&& type.indexOf(trans.tw.command.abortedOperation) == -1) {										var duration = getTimeFromTW(infoTable.find("tr:eq(" + offset + ") td:last").text());					var arrivalTime = getDateFromTW(arrivalCell.text());					var imgType = !isSupport ? "attack" : "support";					arrivalCell.prepend("<img src='graphic/command/" + imgType + ".png' title='" + trans.sp.command.arrival + "'>&nbsp; " + trans.tw.all.dateOn + " ").css("font-weight", "bold");					var stillToRun = getTimeFromTW(infoTable.find("tr:eq(" + (offset + 2) + ") td:last").text());								var cancelCell = infoTable.find("tr:last").prev();					var canStillCancel = cancelCell.has("a").length;					if (canStillCancel) {						cancelCell.find("td:first").attr("colspan", "1").attr("nowrap", "nowrap");						var returnTime = getDateFromTW($("#serverTime").text(), true);						returnTime = new Date(returnTime.valueOf() + (duration.totalSecs - stillToRun.totalSecs) * 1000);						cancelCell.append("<td>" + trans.sp.command.returnOn + "</td><td id=returnTimer>" + twDateFormat(returnTime, true, true).substr(3) + "</td>");									setInterval(function timeCounter() {							var timer = $("#returnTimer");							var newTime = new Date(getDateFromTW(timer.text()).valueOf() + 2000);							timer.text(twDateFormat(newTime, true, true).substr(3));						}, 1000);									cancelCell = cancelCell.prev();					}								if (type.indexOf(trans.tw.command.attack) == 0) {						arrivalTime.setTime(arrivalTime.valueOf() + duration.totalSecs * 1000);						cancelCell.after("<tr><td colspan=2>" + trans.sp.command.homeTime + ":</td><td><img src='graphic/command/return.png' title='" + trans.sp.command.homeTime + "'>&nbsp; <b>" + twDateFormat(arrivalTime, true) + "</b></td></tr>");					}				} else {					var imgType = type.indexOf(trans.tw.command.abortedOperation) == 0 ? imgType = "cancel" : "return";					arrivalCell.prepend("<img src='graphic/command/" + imgType + ".png' title='" + trans.sp.command.arrival + "'>&nbsp; " + trans.tw.all.dateOn + " ").css("font-weight", "bold");				}							var player = infoTable.find("td:eq(7) a").text();				var village = getVillageFromCoords(infoTable.find("td:eq(9) a").text());				var second = infoTable.find("td:eq(" + (13 + (catapultTargetActive ? 2 : 0)) + ")").text();							if (type.indexOf(trans.tw.command.returnText) == 0) {					infoTable = $("table.vis:last", table);					if (infoTable.find("td:first").text() == trans.tw.command.haul) {						infoTable = infoTable.prev();					}					infoTable = infoTable.find("tr:last");				} else {					infoTable = $("table.vis:last", table);				}							var unitsSent = {};				$.each(world_data.units, function (i, val) {					unitsSent[val] = parseInt($("td:eq(" + i + ")", infoTable).text(), 10);				});				var unitsCalc = calcTroops(unitsSent);				unitsCalc.colorIfNotRightAttackType($("h2:first", table), !isSupport);							if (user_data.attackAutoRename) {					var inputBox = $("#editInput");					var button = $("input[value='" + trans.tw.command.buttonValue + "']");								var renamed = buildAttackString(village.coord, unitsSent, player, isSupport);					inputBox.val(renamed);					button.click();				}							// When sending os, calculate how much population in total is sent				if (isSupport) {					var totalPop = 0;					$.each(world_data.units, function (i, val) {						var amount = unitsSent[val];						if (amount != 0) {							totalPop += amount * world_data.unitsPositionSize[i];						}					});								var unitTable = $("table.vis:last", table);					unitTable.find("tr:first").append('<th width="50"><img src="graphic/face.png" title="' + trans.sp.all.population + '" alt="" /></th>');					unitTable.find("tr:last").append('<td>' + formatNumber(totalPop) + '</td>');				}			}        }		// USERPROFIEL++ // INFO_ ALLY/PLAYER        else if ((location.href.indexOf('screen=info_') > -1 && location.href.indexOf('screen=info_member') == -1) || location.href.indexOf('screen=ally&mode=profile') > -1) {			var tables = $('#content_value table.vis');			var infoTable = tables.first();			var profile = user_data.profile;						// extra links on the village overview page			if (location.href.indexOf('screen=info_village') > -1 && user_data.villageInfo.active) {				var id = infoTable.find("td:eq(1)").text();				id = id.substr(id.lastIndexOf("=") + 1);				var link = getUrlString("&screen=overview_villages&type=own_home&mode=units&page=-1&targetvillage=" + id);				infoTable.find("tbody:first").append("<tr><td><a href='" + link + user_data.villageInfo.off_link + "'>" + trans.sp.infoVillage.toAttackGroupOnOwnTroopsOverview + "</a></td><td><a href='" + link + user_data.villageInfo.def_link + "'>" + trans.sp.infoVillage.toDefenseGroupOnOwnTroopsOverview + "</a></td><tr>");			}						if (user_data.profile.show && (location.href.indexOf('screen=info_village') == -1 || user_data.showPlayerProfileOnVillage)) {				var screen;				var id;				var mapProfile = user_data.profile.mapLink;				var isVillage = false;				if (location.href.indexOf('screen=info_ally') == -1 && location.href.indexOf('screen=ally&mode=profile') == -1) {					// player and village info page					// Extra links and info in table at the left top					screen = "player";					if (user_data.proStyle) {						$("#content_value td:first").css("width", "40%").next().css("width", "60%");					}					if (location.href.indexOf('screen=info_player') > -1) {						// player info page						id = infoTable.find("tr:eq(5) a").attr("href");						if (id == undefined) {							// no premium							id = infoTable.find("tr a:first").attr("href");						}						id = id.substr(id.indexOf("&player=") + 8);						if (id.indexOf("&") > -1) {							id = id.substr(0, id.indexOf("&"));						}					} else {						// village info page						isVillage = true;						tables = $("#content_value");						infoTable = $("table.vis:first", tables);						id = infoTable.find("tr:eq(3) a");						if (id.size() > 0) {							id = id.attr("href"); id = id.substr(id.lastIndexOf("=") + 1);						} else {							id = 0;						}					}								// Direct link to TW Stats map					if (id > 0 && profile.mapLink.show) {						var link = "http://" + game_data.market + ".twstats.com/" + game_data.world + "/index.php?page=map";						var tribeId = infoTable.find("td:eq(7) a");						if (tribeId.size() == 1) {							tribeId = tribeId.attr("href");							tribeId = tribeId.substr(tribeId.lastIndexOf('=') + 1);						} else tribeId = 0;									if (mapProfile.tribeColor != null) {							link += "&tribe_0_id=" + tribeId + "&tribe_0_colour=" + mapProfile.tribeColor;						}						if (mapProfile.yourTribeColor != null && game_data.player.ally_id != tribeId && game_data.player.ally_id > 0) {							link += "&tribe_1_id=" + game_data.player.ally_id + "&tribe_1_colour=" + mapProfile.yourTribeColor;						}						link += "&player_0_id=" + id + "&player_0_colour=" + mapProfile.playerColor;						link += "&grid=" + (mapProfile.grid ? 1 : 0) + "&fill=" + mapProfile.fill + "&zoom=" + mapProfile.zoom + "&centrex=" + mapProfile.centreX + "&centrey=" + mapProfile.centreY;						if (mapProfile.markedOnly) {							link += "&nocache=1";						}						if (mapProfile.ownColor != null && game_data.player.id != id) {							link += "&player_1_id=" + game_data.player.id + "&player_1_colour=" + mapProfile.ownColor;						}						infoTable.find("tr:last").after("<tr><td colspan=2><a href='" + link + "' target='_blank'>&raquo; " + trans.sp.profile.twStatsMap + "</a> " + trans.sp.profile.externalPage + "</td></tr>");					}								if (!isVillage) {						// Amount of villages						if (user_data.proStyle) {							// always show villagename on one line							var colWidth = $("#content_value table:eq(2) th");							colWidth.first().css("width", "98%");							colWidth.eq(1).css("width", "1%");							colWidth.eq(2).css("width", "1%");						}									var amountOfVillages = tables.eq(1).find("th:first").text();						amountOfVillages = amountOfVillages.substr(amountOfVillages.indexOf("(") + 1);						amountOfVillages = amountOfVillages.substr(0, amountOfVillages.length - 1);						infoTable.find("tr:eq(2)").after("<tr><td>" + trans.sp.profile.villages + "</td><td>" + formatNumber(amountOfVillages) + "</td></tr>");					}				} else {					screen = "tribe";					if (location.href.indexOf('screen=ally&mode=profile') > -1) {						infoTable = tables.eq(1);					}					id = infoTable.find("a");					if (id.size() == 4) {						id = id.eq(2).attr("href");					} else {						id = id.eq(1).attr("href");					}					id = id.substr(id.lastIndexOf("/") + 1);								var link = "http://" + game_data.market + ".twstats.com/" + game_data.world + "/index.php?page=map";					link += "&tribe_0_id=" + id + "&tribe_0_colour=" + mapProfile.tribeColor;					link += "&centrex=" + mapProfile.centreX + "&centrey=" + mapProfile.centreY;					if (mapProfile.yourTribeColor != null && game_data.player.ally_id != id) {						link += "&tribe_1_id=" + game_data.player.ally_id + "&tribe_1_colour=" + mapProfile.yourTribeColor;					}					link += "&grid=" + (mapProfile.grid ? 1 : 0) + "&fill=" + mapProfile.fill + "&zoom=" + mapProfile.zoom					if (mapProfile.markedOnly) {						link += "&nocache=1";					}					if (mapProfile.ownColor != null) {						link += "&player_0_id=" + game_data.player.id + "&player_0_colour=" + mapProfile.ownColor;					}					infoTable.find("tr:last").before("<tr><td colspan=2><a href='" + link + "' target='_blank'>&raquo; " + trans.sp.profile.twStatsMap + "</a> " + trans.sp.profile.externalPage + "</td></tr>");				}							// Build graphs				if (id > 0) {					var html = "";								// TWMap graphs					var twMapGraphs;					if (screen == "tribe") {						twMapGraphs = [["tribe", trans.sp.profile.graphTWMap], ["p_tribe", trans.sp.profile.graphPoints], ["oda_tribe", trans.sp.profile.graphODA], ["odd_tribe", trans.sp.profile.graphODD]];					} else {						twMapGraphs = [["player", trans.sp.profile.graphTWMap], ["p_player", trans.sp.profile.graphPoints], ["oda_player", trans.sp.profile.graphODA], ["odd_player", trans.sp.profile.graphODD]];					}					for (var i = 0; i < twMapGraphs.length; i++) {						var graphDetails = screen == "tribe" ? profile.twMapTribeGraph[twMapGraphs[i][0]] : profile.twMapPlayerGraph[twMapGraphs[i][0]];						if (graphDetails[0]) {							html += createSpoiler(twMapGraphs[i][1], '<img src="http://' + game_data.world + '.tribalwarsmap.com/' + game_data.market + '/graph/' + twMapGraphs[i][0] + '/' + id + '" title="' + trans.sp.profile.graphTWMap + '">', graphDetails[1]);						}					}								// TWStats graphs					var graphs = [["points", trans.sp.profile.graphPoints], ["villages", trans.sp.profile.graphVillages], ["od", trans.sp.profile.graphOD], ["oda", trans.sp.profile.graphODA], ["odd", trans.sp.profile.graphODD], ["rank", trans.sp.profile.graphRank]];					if (screen == "tribe") {						graphs.push(["members", trans.sp.profile.graphMembers]);					}					var toShow = screen == "tribe" ? profile.tribeGraph : profile.playerGraph;					for (var i = 0; i < graphs.length; i++) {						if (toShow[i][1]) {							var graphType = toShow[i][1] == 'big' ? 'ss' : '';							html += createSpoiler(graphs[i][1], '<img src="http://' + game_data.market + '.twstats.com/image.php?type=' + screen + graphType + 'graph&id=' + id + '&s=' + game_data.world + '&graph=' + graphs[i][0] + '">', toShow[i][2] != undefined);						}					}								// Show graphs					if (html.length > 0) {						var pictureTable;						if (screen == 'player' || (isVillage && user_data.showPlayerProfileOnVillage)) {							pictureTable = tables.eq(2);							if (isVillage || pictureTable.html() == null) {								// With no info nor personal text								pictureTable = $("<table class='vis' width='100%'><tr><th colspan='2'>" + trans.tw.profile.title + "</th></tr></table>");								$("#content_value td:first").next().prepend(pictureTable);							} else if (pictureTable.find("th").text() != trans.tw.profile.title) {								// TODO: There is a ; after the IF, is that the intention???								if (pictureTable.find("th:first").text() == trans.tw.profile.awardsWon);								pictureTable = pictureTable.parent();											// If there is only the node "Personal info"								var temp = $("<table class='vis' width='100%'><tr><th colspan='2'>" + trans.tw.profile.title + "</th></tr></table>");								pictureTable.prepend(temp);								pictureTable = temp;							}										if (pictureTable.find("td[colspan=2]").size() > 0) {								pictureTable.find("td:last").attr("colspan", 1).css("width", 240).after("<td>" + html + "</td>");							} else {								pictureTable.find("tr:last").after("<tr><td colspan=2>" + html + "</td></tr>");							}						} else {							infoTable.after("<table class=vis width='100%'><tr><th>" + trans.tw.profile.title + "</th></tr><tr><td>" + html + "</td></tr></table>");						}					}				}							// Conquers (intern)				if (id > 0 && profile.popup.show) {					var twLink = 'http://' + game_data.market + '.twstats.com/' + game_data.world + '/index.php?page=' + screen + '&mode=conquers&id=' + id + '&pn=1&type=1&enemy=-1&enemyt=-1&min=&max=';					var conquers = "<tr><td colspan=2><a href=\"\" id='conquers'>&raquo; " + trans.sp.profile.conquers + "</a> " + trans.sp.profile.internalPage + "</td></tr>";					if (screen == 'tribe') {						infoTable.find("tr:last").before(conquers);					} else {						infoTable.find("tr:last").after(conquers);					}					var popupWidth = profile.popup.width;					var popupHeight = profile.popup.height;					infoTable.after('<div class="messagepop pop" id="popup" style="display: none"><iframe src=' + twLink + ' width=' + popupWidth + ' height=' + popupHeight + '></div>');					$("#popup").css({ "left": ($('window').width() - 60 - popupWidth), "top": 10, "background-color": "#FFFFFF", "border": "1px solid #999999", "position": "absolute", "width": popupWidth, "height": popupHeight, "z-index": 50, "padding": "25px 25px 20px" });								$(function () {						$("#conquers").on('click', function (event) {							if ($(this).hasClass('selected')) {								$("#conquers").removeClass("selected");							} else {								$(this).addClass("selected");							}							$("#popup").css({ "left": ($(window).width() - 60 - popupWidth) }).toggle();							return false;						});									$("#popup").on('click', function () {							$("#popup").hide();							$("#conquers").removeClass("selected");							return false;						});					});				}			}						if (location.href.indexOf('screen=info_village') > -1 && user_data.proStyle && profile.moveClaim) {				// move claim to a position that does not interfere with more important links (2-click behavior)				if ($("td:eq(8)", infoTable).text() == trans.tw.profile.claimedBy) {					infoTable.append($("tr:eq(5),tr:eq(6)", infoTable));				}			}        }		// TRIBAL WAR STATS        else if (location.href.indexOf('screen=wars') > -1 && (location.href.indexOf('mode=running') > -1 || location.href.indexOf('mode=') == -1)) {			// Wars don't really work anymore after changes by Innogames			// To get the same result, many ajax calls would now be needed			// Remove space between // and <!-- to include the code again            // <!-- @@INCLUDE "page\wars.js" INDENT=3 //-->        }		// MARKET        else if (location.href.indexOf('screen=market') > -1) {			if (location.href.indexOf('try=confirm_send') > -1) {				if (user_data.proStyle && user_data.autoMarketFocus) {					$("input[type='submit']").focus();				}			}			else if (location.href.indexOf('&mode=') == -1 || location.href.indexOf('&mode=send') > -1) {				if (location.href.indexOf('try=confirm_send') == -1) {					// Spice up market:					// 120 x 106 pixels: There are market images that are smaller					// Making all images equally large results in the OK button remaining on the same place					if (user_data.proStyle && user_data.marketResizeImage) {						$("img[src*='big_buildings/market']").width(120).height(106);					}								// New last village:					$("input[type='submit']").click(function () {						var village = getVillageFromCoords($("#inputx").val() + "|" + $("#inputy").val());						if (village.isValid) {							pers.set("lastVil", village.coord);						}					});								// Add last & target					var vilHome = getVillageFromCoords(game_data.village.coord);								var targetLocation = $("#inputx").parent().parent().parent();					var cookie = pers.get("lastVil");					var coord = getVillageFromCoords(cookie);					var htmlStr = '';					if (coord.isValid) {						var dist = getDistance(coord.x, vilHome.x, coord.y, vilHome.y, 'merchant');						htmlStr = printCoord(coord, "&raquo; " + trans.sp.all.last + ": " + coord.x + "|" + coord.y);						htmlStr += "&nbsp; <span id=lastVilTime>" + dist.html + "</span>";					}								// Add target village					var target = getVillageFromCoords(spTargetVillageCookie());					if (target.isValid) {						var dist = getDistance(target.x, vilHome.x, target.y, vilHome.y, 'merchant');						if (htmlStr.length > 0) {							htmlStr += "<br>";						}						htmlStr += printCoord(target, "&raquo; " + trans.sp.all.target + ": " + target.x + "|" + target.y) + " &nbsp;<span id=targetVilTime>" + dist.html + "</span>";					}								if (htmlStr.length > 0) {						targetLocation.append("<tr><td colspan=2>" + htmlStr + "</td></tr>");					}								// Calculate total resources sent					var table = $("table.vis:last");					if (table.prev().text() == trans.tw.market.incomingTransports) {						var sent = { stone: 0, wood: 0, iron: 0 };						table.find("tr:gt(0)").each(function () {							var cell = $(this).find("td:eq(1)");							var resources = $.trim(cell.text().replace(/\./g, "").replace(/\s+/g, " ")).split(" ");														for (var i = 0; i < resources.length; i++) {								if (resources[i]) {									var restype = cell.find("span.icon:eq(" + i + ")");									for (var resIndex = 0; resIndex < world_data.resources_en.length; resIndex++) {										if (restype.hasClass(world_data.resources_en[resIndex])) {											sent[world_data.resources_en[resIndex]] += parseInt(resources[i], 10);										}									}								}							}						});									table.append("<tr><th>" + trans.sp.all.total + ":</th><td colspan=3><img src=graphic/holz.png> " + formatNumber(sent.wood) + "&nbsp; <img src=graphic/lehm.png> " + formatNumber(sent.stone) + "&nbsp; <img src=graphic/eisen.png> " + formatNumber(sent.iron) + "</td></tr>");					}				}			}        }										// SETTINGS        else if (location.href.indexOf('screen=settings') > -1) {            // Add sangu to the menu            //$("#content_value table.vis:first").append("<tr><td>&nbsp;</td></tr><tr><th><a href='" + getUrlString("screen=settings&mode=sangu") + "'>Sangu</a></th></tr>");            if (location.href.indexOf('mode=vacation') > -1) {                // VACATION MODE				var maxSitDays = server_settings.maxSitDays;				var daysTable = $("#content_value table.vis:eq(1)");				var days = $("td:last", daysTable).text();				days = maxSitDays - parseInt(days.substr(0, days.indexOf(" ")), 10);				if (days > 0) {					var tillTime = new Date();					tillTime.setDate(tillTime.getDate() + days);					daysTable.append("<tr><td>" + trans.sp.rest.sittingAttackTill + "</td><td>" + (tillTime.getDate() + "." + pad(tillTime.getMonth() + 1, 2) + "." + tillTime.getFullYear()) + "</td></tr>");				} else {					daysTable.find("td:last").css("background-color", user_data.colors.error);				}            }			else if (location.href.indexOf('mode=quickbar_edit') > -1) {				// EDIT/ADD TO QUICKBAR				if (user_data.scriptBarEditBoxCols != null && user_data.scriptBarEditBoxCols != false) {					// TODO: textareaIfy: This might be useful on other places aswell. Move to func/UI?					function textareaIfy(element) {						var textarea = 							$('<textarea>')								.attr('cols', Math.round(user_data.scriptBarEditBoxCols / 9))								.attr('rows', user_data.scriptBarEditBoxRows)								.val($(element).val());										textarea.change(function () {							element.val($(this).val());						});										element.before(textarea);						$(element).hide();					}									var url = $("form :input[type='text']").css("width", user_data.scriptBarEditBoxCols).last();					textareaIfy(url);				}			}            else if (location.href.indexOf('mode=sangu') > -1) {				// SANGU SCREEN				//var menu = "<h2>" + trans.sp.sp.configuration + "</h2>";				//menu += "<table class=vis width='50%'><tr><th>" + trans.tw.all.groups + "</th>";				//menu += "</table>";								//$("#content_value table:first tr:first > td:last").html(menu);				//$("#content_value table:first td:last").html(menu);								//$("#content_value table.vis:gt(0)").remove();				//$("#content_value table.vis:first").after(menu);				//var twTables = $("#content_value table.vis:gt(0)");				//twTables.eq(1).remove();				//twTables.eq(0).replaceWith(menu);            }        }								// ALL OVERVIEW PAGES        else if (location.href.indexOf('screen=overview_villages') > -1) {			var overviewTable;			// make the editting groups box less wide			// add alternating row colors			$("#edit_group_href").click(function () {				var groupTable = $("#group_list");				groupTable.width(300);							groupTable.find("th:first").attr("colspan", "3");				var mod = 0;				groupTable.find("tr:gt(0)").each(function () {					mod++;					$(this).addClass("row_" + (mod % 2 == 0 ? "a" : "b"));				});			});			//overviewTable						var tableHandler;			(function (tableHandler) {				function init(id, options) {					tableHandler.overviewTableName = id;					tableHandler.overviewTable = $("#" + id);					tableHandler.settings = {						hasBottomTotalRow: false											};					tableHandler.settings = $.extend({}, tableHandler.settings, options || {});										// do stuff on page load					ajaxLoadNextPageSetup();				}				tableHandler.init = init;								function getReplacedVillageRows(page) {					var overviewTable = typeof page === 'undefined' ? tableHandler.overviewTable : $("#"+tableHandler.overviewTableName, page);					if (typeof tableHandler.settings.rowReplacer === "function") {						var newTable = "";						var villageRows = selectVillageRows(overviewTable);						villageRows.each(function () {							var row = $(this);							newTable += tableHandler.settings.rowReplacer(row);						});						return newTable;					} else {						return selectVillageRows(overviewTable);					}				}				tableHandler.getReplacedVillageRows = getReplacedVillageRows;								function selectVillageRows(page) {					//q(tableHandler.overviewTableName);					//q("grrrr:"+page.find("tr").not(":first").length);					var villageRows = page.find("tr").not(":first");					if (tableHandler.settings.hasBottomTotalRow) {						villageRows = villageRows.not(":last");					}					//q(villageRows);					return villageRows;				}								function ajaxLoadNextPageSetup() {					if (server_settings.ajaxAllowed) {						var nextPageLink = $("#paged_view_content a:first.paged-nav-item");						if (nextPageLink.length != 0) {							// find all pages we can still add to the current table							var currentPageLabel = nextPageLink.parent().find("strong");							var nextPageLinks = [];							currentPageLabel = currentPageLabel.next();							while (currentPageLabel.text().match(/\d/)) {								nextPageLinks.push(currentPageLabel);								currentPageLabel = currentPageLabel.next();							}														if (nextPageLinks.length > 0) {								nextPageLink.parent().append("&nbsp; <a href=# id=loadNextPage>"+trans.sp.overviews.loadNextPage+"</a>");																$("#loadNextPage").click(function() {									// Get next page or remove link									var nextPageUrl = nextPageLinks[0];									if (nextPageLinks.length == 1) {										$(this).replaceWith("<strong>"+trans.sp.overviews.loadNextPage+"</strong>");									}									nextPageLinks.shift();																		// Fetch and insert next page									ajax(nextPageUrl.attr("href"), function (page) {										var nextPageRows = getReplacedVillageRows($(page));										if (tableHandler.settings.hasBottomTotalRow) {											tableHandler.overviewTable.find("tr:last").before(nextPageRows);										} else {											tableHandler.overviewTable.append(nextPageRows);										}													nextPageUrl.replaceWith("<strong>"+nextPageUrl.text()+"</strong>");									});								});							}						}					}				}			})(tableHandler || (tableHandler = {}));			// PRODUCTION OVERVIEW            if (location.href.indexOf('mode=prod') > -1) {				overviewTable = $("#production_table");				tableHandler.init("production_table");								// Filter full storage rooms				var resTable = $("#production_table");				var menu = "<table class='vis' width='100%'>";				menu += "<tr><th>";				menu += " <input type=checkbox id=resFilter " + (user_data.resources.filterRows ? "checked" : "") + "> " + trans.sp.prodOverview.filter + " ";				menu += "&nbsp;<input type=button id=resStorageFull value='" + trans.sp.prodOverview.filterFullGS + "' title=''>&nbsp; &nbsp; ";				menu += "<select id=resAmountType><option value=1>" + trans.sp.all.more + "</option>";				menu += "<option value=-1>" + trans.sp.all.less + "</option></select>";				menu += "<input type=text id=resAmount size=6 value=" + user_data.resources.requiredResDefault + ">";				menu += " <input type=button class=resFilter value='" + trans.tw.all.wood + "' resIndex=0><input type=button class=resFilter value='" + trans.tw.all.stone + "' resIndex=1><input type=button class=resFilter value='" + trans.tw.all.iron + "' resIndex=2><input type=button class=resFilter value='" + trans.sp.all.all + "' resIndex=-1>";				menu += " " + trans.sp.all.withText + " <input type=checkbox id=resMerchant " + (user_data.resources.filterMerchants ? "checked" : "") + " title='" + trans.sp.prodOverview.merchantTooltip + "'>";				menu += "<input type=text id=resMerchantAmount size=2 value=" + user_data.resources.requiredMerchants + " title='" + trans.sp.prodOverview.merchantAmountTooltip + "'> " + trans.sp.all.merchants + " ";				menu += "&nbsp; &nbsp; <input type=button id=resBBCode value='" + trans.sp.prodOverview.bbCodes + "'> <input type=checkbox id=resBBCodeImages> " + trans.sp.prodOverview.bbCodesInfo;				menu += "</th></tr></table>";				resTable.before(menu);								$("#resFilter").change(function () {					var isCheck = $(this).is(":checked");					$("#resFilter").attr("title", isCheck ? trans.sp.prodOverview.filterTooltip : trans.sp.prodOverview.filterTooltipReverse);					$("#resStorageFull").attr("title", isCheck ? trans.sp.prodOverview.filterFullGSTooltip : trans.sp.prodOverview.filterFullGSTooltipReverse);					$(".resFilter").each(function (index, value) {						if (index == 3) {							$(value).attr("title", isCheck ? trans.sp.prodOverview.filterAllTooltip : trans.sp.prodOverview.filterAllTooltipReverse);						} else {							$(value).attr("title", isCheck ? trans.sp.prodOverview.filter1Tooltip.replace("{0}", $(value).attr("value")) : trans.sp.prodOverview.filter1TooltipReverse.replace("{0}", $(value).attr("value")));						}					});				});									$("#resFilter").change();								$("#resStorageFull").click(function () {					trackClickEvent("FilterFullRes");					filterRes('full', $("#resFilter").attr("checked") == "checked");				});								$("#resBBCode").click(function () {					trackClickEvent("BBCodeOutput");					var bbs = filterRes("bbcode", false);					if ($("#bbcodeArea").size() == 0) {						$(this).after("<textarea id=bbcodeArea cols=50 rows=10 wrap=off>");					}									$("#bbcodeArea").val(bbs);				});								function filterRes(resourceIndex, hideRows) {					var resCode = [trans.tw.all.wood, trans.tw.all.stone, trans.tw.all.iron];					var bbcodes = '';					var goners = $();					var stayers = $();					var filterMerchants = $("#resMerchant").attr("checked") == "checked";					var filterMerchantsAmount = parseInt($("#resMerchantAmount").val(), 10);					var minAmount = parseInt($("#resAmount").val(), 10);					var reverse = $("#resAmountType").val() == "-1";					var bbCodeImages = $("#resBBCodeImages").attr("checked") == "checked";					var minDif = user_data.resources.bbcodeMinimumDiff;									if (reverse) {						bbcodes = trans.sp.all.tooMuch + "\n";					} else {						bbcodes = trans.sp.all.tooLittle + "\n";					}									function doResource(resCell, resArray, resIndex, reverse, minAmount) {						var resAmount = parseInt(resArray[resIndex], 10);						if ((!reverse && resAmount > minAmount) || (reverse && resAmount < minAmount)) {							$("span[title]:eq(" + resIndex + ")", resCell).css("font-weight", "bold")							return false;						}						return true;					}									var hasNotes = $("th:first", resTable).text().indexOf(trans.tw.overview.village) == -1;					resTable.find("tr:gt(0)").each(function () {						var isOk = true;						var resCell;						if (hasNotes) {							resCell = $(this).find("td:eq(3)");						} else {							resCell = $(this).find("td:eq(2)");						}						var resources = $.trim(resCell.text()).replace(/\./gi, "").split(" ");										if (resourceIndex == 'bbcode') {							// All resources							var villageBBCode = '';							for (var i = 0; i < 3; i++) {								if ((!reverse && resources[i] - minDif > minAmount) || (reverse && parseInt(resources[i], 10) + parseInt(minDif, 10) < minAmount)) {									if (bbCodeImages) {										villageBBCode += "[img]http://www.tribalwars.nl/graphic/" + world_data.resources[i] + ".png[/img] ";									} else {										villageBBCode += resCode[i] + " ";									}									villageBBCode += parseInt(Math.abs(resources[i] - minAmount) / 1000, 10) + "k ";								}							}							if (villageBBCode.length > 0) {								var villageCell = $("td:eq(" + (hasNotes ? "1" : "0") + ") span:eq(1)", this);								bbcodes += "[village]" + getVillageFromCoords(villageCell.text()).coord + "[/village] " + villageBBCode + "\n";							}						} else if (resourceIndex == 'full') {							// full storage rooms							if ($(".warn", this).size() > 0) {								resCell.css("background-color", user_data.colors.neutral);								isOk = false;							}													} else {							// One specific resource							$("span[title]", resCell).css("font-weight", "normal");											if (resourceIndex == "-1") {								isOk = isOk && !(!doResource(resCell, resources, 0, reverse, minAmount)									| !doResource(resCell, resources, 1, reverse, minAmount)									| !doResource(resCell, resources, 2, reverse, minAmount));							} else {								isOk = isOk && doResource(resCell, resources, resourceIndex, reverse, minAmount);							}											if (!isOk) {								resCell.css("background-color", "#DED3B9");							} else {								resCell.css("background-color", "");							}											if (filterMerchants) {								resCell = $(this).find("td:eq(4)");								if (hasNotes) {									resCell = resCell.next();								}								var merchants = resCell.text();								merchants = merchants.substr(0, merchants.indexOf("/"));								if (merchants < filterMerchantsAmount) {									resCell.css("background-color", user_data.colors.error);								} else {									resCell.css("background-color", "");								}							}						}										if (hideRows && isOk) {							goners = goners.add($(this));														// Village rename script will not rename villages if the hidden rename inputfield is on a hidden row							// --> People were using our script to filter the village list and then use a mass village renamer which also renamed the hidden village rows							$("input:first", $(this)).val("");													}						else if (!$(this).is(":visible")) {							stayers = stayers.add($(this));						}					});					stayers.show();					goners.hide();					return bbcodes;				}								$(".resFilter").click(function () {					trackClickEvent("FilterResource");					filterRes($(this).attr("resIndex"), $("#resFilter").attr("checked") == "checked");				});            }			// TROOPS OVERVIEW            else if (location.href.indexOf('mode=units') > -1						&& (location.href.indexOf('type=own_home') > -1 || location.href.indexOf('type=there') > -1)) {				overviewTable = $("#units_table");								var villageCounter = 0;				var rowSize = world_data.units.length + 1;				if (world_config.hasMilitia) {					rowSize++;				}								function ReplaceUnitRow(row) {					//q($(row).html());					var mod = "row_a";					var newRow = "";					var finalRow = "";					var addThisRow = true;					var cells = $("td:gt(0)", row);					var units = {};					var villageId = $("td:first span[id*='label_text']", row).attr("id").substr(11);									cells.each(function (index, element) {						if (doFilter && index - 1 == unitIndex && parseInt(this.innerHTML, 10) < unitAmount) {							//q("index:" + index + ' == '+ unitIndex + " : " + row.html() + ' * 1 < ' + unitAmount);							addThisRow = false;							return false;						}						else if (index == rowSize) {							//q(index + "==" + rowSize);							newRow += "<td>";							newRow += "<img src='/graphic/dots/red.png' title='" + trans.sp.troopOverview.removeVillage + "' /> ";							if (game_data.village.id != villageId) {								newRow += "<a href='" + $("a", element).attr('href').replace("mode=units", "") + "&target=" + villageId + "'>";								newRow += "<img src='/graphic/command/attack.png' title='" + trans.sp.troopOverview.toThePlace + "'/>"; // Works only with leftclick onclick='this.src=\"/graphic/command/return.png\";'								newRow += "</a>";							}							newRow += "</td>";						} else {							//q("units:" + world_data.units[index - 1]);							var cellDisplay = this.innerHTML;							if (cellDisplay === "0") {								cellDisplay = "&nbsp;";							}							else if (cellDisplay.indexOf('="has_tooltip"') > -1)  {								cellDisplay = cellDisplay.replace('="has_tooltip"', '="has_tooltip" title="'+trans.sp.troopOverview.cheapNobles+'"');							}														newRow += "<td>" + cellDisplay + "</td>";							if (index > 0) {								units[world_data.units[index - 1]] = parseInt(row.html(), 10); 							}							// innerHTML can contain a + sign for the nobles: "+" indicates nobles can be rebuild cheaply							// The snobs are not important here						}					});									if (addThisRow) {						var villageType = calcTroops(units);						if (doFilter) {							mod = villageCounter % 2 == 0 ? "row_a" : "row_b";						} else {							mod = !villageType.isDef ? "row_a" : "row_b";						}										finalRow += "<tbody>";						finalRow += "<tr arrival='0' class='row_marker " + mod + (game_data.village.id == villageId ? " selected" : "") + "'>";						finalRow += "<td>" + $("td:first", row).html() + "</td>";						finalRow += newRow;						finalRow += "<td></td></tr>";						finalRow += "</tbody>";										villageCounter++;												return finalRow;					}					return "";				}								tableHandler.init("units_table", {					rowReplacer: ReplaceUnitRow				});								function makeUnitBox(id, select) {					var box = "<select id=" + id + ">";					$.each(world_data.units, function (i, v) {						box += "<option value=" + i + (v == select ? " selected" : "") + ">" + trans.tw.units.names[v] + "</option>";					});					box += "</select>";					return box;				}								var menu = "";				menu += "<tr>";				menu += "<th colspan=" + (4 + world_data.units.length + (world_config.hasMilitia ? 1 : 0)) + ">";				menu += "<input type=text size=5 id=filterAxeValue value='" + user_data.command.filterMinDefault + "'>";				menu += makeUnitBox("filterAxeType", user_data.command.filterMinDefaultType);				menu += "<input type=button id=filterAxe value='" + trans.sp.troopOverview.filterTroops + "'> &nbsp;";				menu += "<select id=filterPopValueType><option value=1>" + trans.sp.all.more + "</option>";				menu += "<option value=-1>" + trans.sp.all.less + "</option></select>";				menu += "<input type=text size=5 id=filterPopValue value='" + user_data.command.filterMinPopulation + "'><input type=button id=filterPop value='" + trans.sp.troopOverview.filterPopulation + "'> &nbsp; ";				menu += "<input type=button id=calculateStack value='" + trans.sp.troopOverview.calcStack + "'> &nbsp; ";				menu += "<input type=button id=snobFilter value='" + trans.sp.troopOverview.filterNoble + "'> &nbsp; ";				menu += "<input type=button id=attackFilter value='" + trans.sp.troopOverview.filterUnderAttack + "'> &nbsp; ";				menu += "<input type=checkbox id=sortIt " + (user_data.command.filterAutoSort ? " checked" : "") + "> " + trans.sp.troopOverview.sort + " &nbsp; ";								if (location.href.indexOf('type=there') > -1) {					menu += "<input type=button id=defRestack value='" + trans.sp.troopOverview.restack + "'>";				}								menu += "</th></tr><tr id=units_table_header>";				menu += "<th>" + trans.sp.troopOverview.village + "</th>";				menu += "<th>" + trans.sp.troopOverview.nightBonus + "</th>";				$.each(world_data.units, function (i, v) {					menu += "<th><img src='/graphic/unit/unit_" + v + ".png' title=\"" + trans.sp.troopOverview.selectUnitSpeed.replace("{0}", trans.tw.units.names[v]) + "\" alt='' id=" + v + " /></th>";				});				if (world_config.hasMilitia) {					menu += "<th><img src='/graphic/unit/unit_militia.png' title='" + trans.tw.units.militia + "' alt='' id=militia /></th>";				}				menu += "<th>" + trans.sp.troopOverview.commandTitle + "</th>";								var currentPageSpeed = spSpeedCookie();								// Do initial filter? (based on querystring)				var search = window.location.search.substring(1).split("&");				var doFilter = false;				var unitIndex = user_data.command.filterMinDefault, unitAmount = user_data.command.filterMinDefault, sort = false, changeSpeed = false;				for (i = 0; i < search.length; i++) {					var item = search[i].split("=");					switch (item[0]) {						case 'unit':							doFilter = true;							unitIndex = item[1];							break;						case 'amount':							doFilter = true;							unitAmount = parseInt(item[1], 10);							break;						case 'changeSpeed':							changeSpeed = item[1];							if (changeSpeed != false) {								//spSpeedCookie(changeSpeed);								currentPageSpeed = changeSpeed;							}							break;										case 'targetvillage':							var newTargetVillage = getVillageFromCoords(item[1]);							spTargetVillageCookie(newTargetVillage.coord);							break;										case 'sort':							sort = item[1] == "true";							break;					}				}								var target = getVillageFromCoords(spTargetVillageCookie());				menu += "<th nowrap>" + trans.sp.all.targetEx + " <input type=text id=targetVillage name=targetVillage size=8 value='" + (target.isValid ? target.coord : "") + "'><input type=button id=targetVillageButton value='" + trans.sp.troopOverview.setTargetVillageButton + "'></th>";				menu += "</tr>";								var newTable = tableHandler.getReplacedVillageRows();				$("#units_table").html("<table width='100%' class='vis' id='units_table' target='false'>" + menu + newTable + "</table>");				$('#targetVillage').click(function () {					$(this).focus().select();				});								// Recalculate arrival times as the target village changes				$("#targetVillageButton").click(function () {					trackClickEvent("TargetVillageSet");					var targetMatch = getVillageFromCoords($('#targetVillage').val(), true);					$("#units_table").attr("target", targetMatch.isValid);					if (!targetMatch.isValid) {						spTargetVillageCookie("");											} else {						spTargetVillageCookie(targetMatch.coord);						$("#units_table").find("tr:visible:gt(1)").each(function () {							var coord = $(this).find("span[id^=label_text_]")[0].innerHTML.match("^.*\\((\\d+)\\|(\\d+)\\) "+trans.tw.all.continentPrefix+"\\d{1,2}$");							var dist = getDistance(targetMatch.x, coord[1], targetMatch.y, coord[2], currentPageSpeed);											$("td:last", this).html(dist.html);							$(this).attr("arrival", dist.travelTime);							if (dist.isNightBonus) {								$("td:eq(1)", this).css("background-color", user_data.colors.error);							} else {								$("td:eq(1)", this).css("background-color", '');							}						});										if ($("#sortIt").is(":checked")) {							$("#units_table").find("tr:visible:gt(1)").sortElements(function (a, b) {								return parseInt($(a).attr("arrival"), 10) > parseInt($(b).attr("arrival"), 10) ? 1 : -1;							});						}					}				});								// "Attacks per page" -> change to # villages in the list				var pageSize = $("input[name='page_size']");				pageSize.parent().prev().text(trans.sp.overviews.totalVillages);				pageSize.val(villageCounter);								// Distance village to target village				// Change active speed by clicking on a unit icon				$('#' + currentPageSpeed).css("border", "2px green dotted");				$('#' + spSpeedCookie()).css("border", "3px red solid");				$("#units_table_header").click(function (e) {					if (e.target.nodeName === 'IMG') {						currentPageSpeed = e.target.id;						$("img", this).css("border", "0px");						$('#' + currentPageSpeed).css("border", "2px green dotted");						$('#' + spSpeedCookie()).css("border", "3px red solid");						$("#targetVillageButton").click();					}				});								$("#units_table_header").dblclick(function (e) {					if (e.target.nodeName === 'IMG') {						currentPageSpeed = e.target.id;						spSpeedCookie(e.target.id);						$("img", this).css("border", "0px");						$('#' + currentPageSpeed).css("border", "2px green dotted");						$('#' + spSpeedCookie()).css("border", "3px red solid");						$("#targetVillageButton").click();					}				});								if (sort) {					$("#targetVillageButton").click();				}								// delete a table row				// TODO: Opera doesn't recognize right mouse clicks :(.. Perhaps we can implement this now and make it work for Firefox?				$("#units_table").mouseup(function (e) {					if (e.target.nodeName === 'IMG') {						if (e.target.title == trans.sp.troopOverview.removeVillage) {							//if ((!$.browser.msie && e.button == 0) || ($.browser.msie && e.button == 1))							//	q("Left Button");							// else if (e.button == 2)							//	q("Right Button");											pageSize.val(parseInt(pageSize.val(), 10) - 1);							$(e.target).parent().parent().parent().hide();							//img.css("border", (img.css("border-width").substr(0, 1) * 1 + 1) + "px red solid");						}					}				});								// change by default selected unit the filter will be active for				$("#filterAxeType").change(function () {					var unit = world_data.units[$(this).val()];					if (typeof user_data.command.filterMin[unit] !== 'undefined') {						$("#filterAxeValue").val(user_data.command.filterMin[unit]);					} else {						$("#filterAxeValue").val(user_data.command.filterMinOther);					}				});								// Filter rows with less than x axemen (or another unit)				$("#filterAxe").click(function () {					trackClickEvent("FilterUnitAmount");					var villageCounter = 0;					var goners = $();					var minAxeValue = parseInt($("#filterAxeValue").val(), 10);					var unit = parseInt($('#filterAxeType').val(), 10);					$("#units_table").find("tr:visible:gt(1)").each(function () {						var val = $("td:eq(" + (unit + 2) + ")", this).html();						if (val == '&nbsp;' || parseInt(val, 10) < minAxeValue) {							goners = goners.add($(this));							$("input:first", $(this)).val("");						}						else							villageCounter++;					});					goners.parent().hide();					pageSize.val(villageCounter);				});								// Calculate stack				$("#calculateStack").click(function () {					trackClickEvent("CalculateStack");					if (!this.disabled) {						this.disabled = true;						$("#units_table").find("tr:visible:gt(1)").each(function () {							var total = 0;							$("td:gt(1)", this).each(function (i) {								if (!($.trim(this.innerHTML) == '' || this.innerHTML == '&nbsp;' || i >= world_data.unitsPositionSize.length)) {									total += this.innerHTML * world_data.unitsPositionSize[i];								}							});							var color = getStackColor(total, 30 * world_config.farmLimit);							$("td:eq(1)", this).text(formatNumber(total)).css("background-color", color);						});					}				});								// Calculate Restack BB codes				if (location.href.indexOf('type=there') > -1) {					$("#defRestack").click(function () {						trackClickEvent("BBCodeOutput");						$("#calculateStack").click();										var request = "";						$("#units_table").find("tr:visible:gt(1)").each(function () {							var total = parseInt($("td:eq(1)", $(this)).text().replace(/\./, ''), 10);							if (user_data.restack.to - total > user_data.restack.requiredDifference) {								var villageCoord = getVillageFromCoords($(this).find("td:first span[id*='label_']").text());								request += "[village]" + villageCoord.coord + "[/village] (" + parseInt((user_data.restack.to - total) / 1000, 10) + "k)\n";							}						});										if ($("#defRestackArea").size() == 0) {							$(this).after("<textarea cols=35 rows=10 id=defRestackArea>" + request + "</textarea>");						} else {							$("#defRestackArea").val(request);						}					});				}								// filter rows with less then x population				$("#filterPop").click(function () {					trackClickEvent("FilterFarm");					$("#calculateStack").click();					var villageCounter = 0;					var goners = $();					var min = parseInt($("#filterPopValue").val(), 10);					var reverseFilter = $("#filterPopValueType").val() == "-1";					$("#units_table").find("tr:visible:gt(1)").each(function () {						var line = $(this);						$("td:eq(1)", this).each(function () {							var amount = parseInt($(this).text().replace('.', ''), 10);							if ((!reverseFilter && amount < min) || (reverseFilter && amount > min)) {								goners = goners.add(line);								$("input:first", line).val("");							}							else villageCounter++;						});					});					goners.parent().hide();					pageSize.val(villageCounter);				});								// Filter rows without snobs/nobles				$("#snobFilter").click(function () {					trackClickEvent("FilterSnob");					var villageCounter = 0;					var goners = $();					$("#units_table").find("tr:visible:gt(1)").each(function () {						if ($.trim($("td:eq(" + (world_data.unitsPositionSize.length + 1) + ")", this).text()) === '') {							goners = goners.add($(this));							$("input:first", $(this)).val("");						} else							villageCounter++;					});					goners.parent().hide();					pageSize.val(villageCounter);				});								// hide rows not under attack				$("#attackFilter").click(function () {					trackClickEvent("FilterUnderAttack");					var villageCounter = 0;					var goners = $();					$("#units_table").find("tr:visible:gt(1)").each(function () {						if ($('td:first:not(:has(img[title=\'' + trans.tw.command.attack + '\']))', this).size() != 0) {							goners = goners.add($(this));							$("input:first", $(this)).val("");						} else {							villageCounter++;						}					});					goners.parent().hide();					pageSize.val(villageCounter);				});            }			// BUILDINGS OVERVIEW            else if (location.href.indexOf('mode=buildings') > -1) {				// Highlight everything not conform				overviewTable = $("#buildings_table");				tableHandler.init("buildings_table");								var menu = "<table class='vis' width='100%'>";				menu += "<tr><th>";				menu += "<input type=checkbox id=buildingOpti> " + trans.sp.buildOverview.optimistic + " ";				menu += "<input type=button id=buildingHighlight value='" + trans.sp.buildOverview.mark + "'>";				menu += "<input type=button id=buildingFilter value='" + trans.sp.buildOverview.filter + "'>";				menu += "</th></tr></table>";				overviewTable.before(menu);								function filterBuildings(cellAction, hideRows) {					var buildings = [];					overviewTable.find("tr:first img").each(function (i, v) {						buildings[i] = this.src.substr(this.src.lastIndexOf('/') + 1);						buildings[i] = buildings[i].substr(0, buildings[i].indexOf('.'));					});									var goners = $();					var opti = $("#buildingOpti").attr("checked") == "checked";					overviewTable.find("tr:gt(0)").each(function () {						var isOk = true;						$(this).find("td:gt(3)").each(function (i, v) {							var range = user_data.buildings[buildings[i]];							if (range != undefined) {								var text = parseInt($(this).text(), 10);								if (text < range[0]) {									$(this).css("background-color", user_data.colors.error);									isOk = false;								} else if (text > range[1] && !opti) {									$(this).css("background-color", user_data.colors.good);									isOk = false;								} else									$(this).css("background-color", "");							}						});						if (hideRows && isOk) {							goners = goners.add($(this));							$("input:first", $(this)).val("");						}					});					goners.hide();				}								$("#buildingHighlight").click(function () {					trackClickEvent("TableHighlight");					filterBuildings(function (cell, isOk) {						cell.css("background-color", isOk ? "" : user_data.colors.neutral);					}, false);				});								$("#buildingFilter").click(function () {					trackClickEvent("TableRemove");					filterBuildings(function (cell, isOk) {						cell.css("background-color", isOk ? "" : user_data.colors.neutral);					}, true);				});            }			// TECHS OVERVIEW // SMEDERIJ OVERVIEW // SMITHY OVERVIEW            else if (location.href.indexOf('mode=tech') > -1) {				overviewTable = $("#techs_table");				tableHandler.init("techs_table");								// Highlight everything not conform usersettings				if (world_config.smithyLevels) {					var menu = "<table class='vis' width='100%'>";					menu += "<tr><th>";					menu += "<select id='groupType'>";					$.each(user_data.smithy, function (i, v) {						menu += "<option value=" + i + ">" + v[0] + "</option>";					});					menu += "</select>";					menu += "<input type=checkbox id=buildingOpti> " + trans.sp.smithOverview.optimistic + " ";					menu += "<input type=button id=smithyHighlight value='" + trans.sp.smithOverview.mark + "'>";					menu += "<input type=button id=smithyFilter value='" + trans.sp.smithOverview.filter + "'>";					menu += "</th></tr></table>";					$("#techs_table").before(menu);									function filterTechs(cellAction, hideRows) {						var goners = $();						var opti = $("#buildingOpti").attr("checked") == "checked";						var def = user_data.smithy[$("#groupType").val()][1];						$("#techs_table").find("tr:gt(0)").each(function () {							var isOk = true;							$(this).find("td:gt(2)").each(function (i, v) {								var range = def[world_data.units[i]];								if (i < world_data.units.length && range != undefined) {									var text = parseInt($(this).text(), 10);									if (text == '') {										text = 0;									}									if (text < range[0]) {										$(this).css("background-color", user_data.colors.error);										isOk = false;									}									else if (text > range[1] && !opti) {										$(this).css("background-color", user_data.colors.good);										isOk = false;									} else {										$(this).css("background-color", "");									}								}							});							if (hideRows && isOk) {								goners = goners.add($(this));								$("input:first", $(this)).val("");							}						});						goners.hide();					}									$("#smithyHighlight").click(function () {						trackClickEvent("TableHighlight");						filterTechs(function (cell, isOk) {							cell.css("background-color", isOk ? "" : user_data.colors.neutral);						}, false);					});									$("#smithyFilter").click(function () {						trackClickEvent("TableRemove");						filterTechs(function (cell, isOk) {							cell.css("background-color", isOk ? "" : user_data.colors.neutral);						}, true);					});				}            }			// GROUPS OVERVIEW            else if (location.href.indexOf('mode=groups') > -1) {				overviewTable = $("#group_assign_table");				tableHandler.init("group_assign_table", {					hasBottomTotalRow: true				});								// TODO: edit groups: make div floatable and remember position				var menu = "";				menu += "<table class=vis width='100%'><tr><th>";								menu += trans.sp.defOverview.village + " <input type=text size=5 id=defFilterDistVillage value=''>";				menu += "<select id=defFilterDistType>";				menu += "<option value=1 selected>" + trans.sp.all.closer + "</option><option value=-1>" + trans.sp.all.further + "</option></select>";				menu += "&nbsp;F <input type=text size=3 id=defFilterDistFields value=" + user_data.restack.fieldsDistanceFilterDefault + ">";				menu += "<input type=button id=defFilterDist value='" + trans.sp.defOverview.distFilter + "' title='" + trans.sp.defOverview.distFilterTooltip + "'>";								menu += "&nbsp; | &nbsp;";				menu += "<input type=button id=attackFilter value='" + trans.sp.defOverview.filterUnderAttack + "'>";								menu += "<br>";								menu += "<input type=checkbox id=defReverseFilter title='" + trans.sp.commands.filtersReverse + "'> " + trans.sp.commands.filtersReverseInfo + ": ";								menu += "&nbsp; <input type=text size=12 id=defFilterTextValue value=''>";				menu += "<input type=button id=defFilterText value='" + trans.sp.groups.villageFilter + "'>";								menu += "&nbsp; <input type=textbox size=3 id=defFilterContinentText maxlength=2><input type=button id=defFilterContinent value='" + trans.sp.commands.continentFilter + "'>";								menu += "&nbsp; <input type=textbox size=3 id=defFilterAmountText maxlength=2><input type=button id=defFilterAmount value='" + trans.sp.groups.amountFilter + "'>";				menu += "&nbsp; <input type=textbox size=3 id=defFilterPointsText maxlength=5><input type=button id=defFilterPoints value='" + trans.sp.groups.pointsFilter + "'>";				menu += "&nbsp; <input type=textbox size=3 id=defFilterFarmText maxlength=5><input type=button id=defFilterFarm value='" + trans.tw.all.farm + "'>";								menu += "&nbsp; <input type=text size=12 id=defFilterGroupValue value=''>";				menu += "<input type=button id=defFilterGroup value='" + trans.sp.groups.groupNameFilter + "'>";				menu += "</th></tr></table>";								var selectAllRow = $("#group_assign_table tr:last");				$("#group_assign_table").before(menu).after("<table class=vis width='100%'><tr><th><input type=checkbox id=selectAllVisible> " + selectAllRow.text() + "</th></tr></table>");				selectAllRow.remove();								$("#selectAllVisible").click(function () {					var isChecked = $(this).attr("checked") == "checked";					$("#group_assign_table input:hidden").attr("checked", false);					$("#group_assign_table input:visible").attr("checked", isChecked);				});								$("#defReverseFilter").change(function () {					var isChecked = $(this).is(":checked");					var defTrans = trans.sp.groups;					$("#defFilterText").attr("title", isChecked ? defTrans.villageFilterTitle : defTrans.villageFilterTitleRev);					$("#defFilterContinent").attr("title", isChecked ? trans.sp.commands.continentFilterTooltip : trans.sp.commands.continentFilterTooltipReverse);									$("#defFilterAmount").attr("title", isChecked ? defTrans.amountFilterTitle : defTrans.amountFilterTitleRev);					$("#defFilterPoints").attr("title", isChecked ? defTrans.pointsFilterTitle : defTrans.pointsFilterTitleRev);					$("#defFilterFarm").attr("title", isChecked ? defTrans.farmFilterTitle : defTrans.farmFilterTitleRev);									$("#defFilterGroup").attr("title", isChecked ? defTrans.groupNameFilterTitle : defTrans.groupNameFilterTitleRev);				});				$("#defReverseFilter").change();								function filterGroupRows(filterStrategy, reverseFilter, keepRowStrategy, tag) {					if (reverseFilter == undefined || reverseFilter == null) {						reverseFilter = !$("#defReverseFilter").attr("checked");					}									var goners = $();					var totalVisible = 0;					$("#group_assign_table tr:gt(0):visible").each(function () {						var row = $(this);						if (!reverseFilter != !filterStrategy(row, tag)) {							goners = goners.add(row);							$("input:eq(1)", row).val("");						} else {							totalVisible++;							if (keepRowStrategy != null) {								keepRowStrategy(row, tag);							}						}					});					goners.hide();					var firstHeaderCell = $("#group_assign_table th:first");					var firstHeaderCellHtml = firstHeaderCell.html();					firstHeaderCell.html(firstHeaderCellHtml.substr(0, firstHeaderCellHtml.lastIndexOf(" ")) + " (" + totalVisible + ")");				}								// Filter on distance to given village				$("#defFilterDist").click(function () {					trackClickEvent("FilterDistance");					var targetVillage = getVillageFromCoords($("#defFilterDistVillage").val(), true);					if (!targetVillage.isValid) {						alert(trans.sp.defOverview.distanceToVillageNoneEntered);						return;					}									var reverseFilter = !($("#defFilterDistType").val() != "-1");					var maxDistance = parseInt($("#defFilterDistFields").val(), 10);									var isAlreadyVisible = $("#filterContext").size() == 1;					if (isAlreadyVisible) {						$("#filterContext").html(trans.sp.defOverview.distanceToVillage.replace("{0}", targetVillage.coord));					} else {						$("#group_assign_table").find("th:first").after("<th><span id=filterContext>" + trans.sp.defOverview.distanceToVillage.replace("{0}", targetVillage.coord) + "</span> <img src='graphic/oben.png' class=sortDistance direction=up> <img src='graphic/unten.png' class=sortDistance direction=down></th>");						$(".sortDistance").click(function () {							if ($(this).attr("direction") == "up") {								$("#group_assign_table").find("tr:gt(0):visible").sortElements(function (a, b) {									return parseInt($(a).attr("fieldAmount"), 10) > parseInt($(b).attr("fieldAmount"), 10) ? 1 : -1;								});							} else {								$("#group_assign_table").find("tr:gt(0):visible").sortElements(function (a, b) {									return parseInt($(a).attr("fieldAmount"), 10) < parseInt($(b).attr("fieldAmount"), 10) ? 1 : -1;								});							}						});					}									filterGroupRows(						function (row, tag) {							var compareVillage = getVillageFromCoords(row.find("td:first").text());							tag.distance = getDistance(targetVillage.x, compareVillage.x, targetVillage.y, compareVillage.y, 'ram').fields;							return tag.distance > maxDistance;										}, reverseFilter,						function (mainRow, tag) {							mainRow.attr("fieldAmount", tag.distance);							if (!isAlreadyVisible) {								mainRow.find("td:first").after("<td><b>" + trans.sp.defOverview.fieldsPrefix.replace("{0}", parseInt(tag.distance, 10)) + "</b></td>");							} else {								mainRow.find("td:eq(1)").html("<b>" + trans.sp.defOverview.fieldsPrefix.replace("{0}", parseInt(tag.distance, 10)) + "</b>");							}						}, { distance: 0 });				});								// Filter on incoming attacks				$("#attackFilter").click(function () {					trackClickEvent("FilterUnderAttack");					filterGroupRows(function (row) {						return $('td:first:not(:has(img[title=\'' + trans.tw.command.attack + '\']))', row).size() == 0;					});				});								// filter on village name				$("#defFilterText").click(function () {					trackClickEvent("FilterText");					var compareTo = $("#defFilterTextValue").val().toLowerCase();					if (compareTo.length > 0) {						filterGroupRows(function (row) {							return row.find("td:first").text().toLowerCase().indexOf(compareTo) != -1;						});					}				});								// filter on group names				$("#defFilterGroup").click(function () {					trackClickEvent("FilterGroupName");					var compareTo = $("#defFilterGroupValue").val().toLowerCase();					if (compareTo.length > 0) {						filterGroupRows(function (row) {							return row.find("td:eq(4)").text().toLowerCase().indexOf(compareTo) != -1;						});					}				});								$("#defFilterContinent").click(function () {					trackClickEvent("FilterContinent");					var compareTo = parseInt($("#defFilterContinentText").val(), 10);					if (compareTo >= 0) {						filterGroupRows(function (row) {							var village = getVillageFromCoords(row.find("td:eq(0)").text());							return village.continent() == compareTo;						});					}				});								// filter on # groups				$("#defFilterAmount").click(function (){					trackClickEvent("FilterGroupCount");					var compareTo = parseInt($("#defFilterAmountText").val(), 10);					if (compareTo >= 0) {						if (!$("#defReverseFilter").attr("checked")) {							filterGroupRows(function (row) {								return parseInt(row.find("td:eq(1)").text(), 10) > compareTo;							}, false);						} else {						filterGroupRows(function (row) {								return parseInt(row.find("td:eq(1)").text(), 10) < compareTo;							}, false);						}					}				});								$("#defFilterPoints").click(function () {					trackClickEvent("FilterPoints");					var compareTo = parseInt($("#defFilterPointsText").val(), 10);					if (compareTo >= 0) {						filterGroupRows(function (row) {							return parseInt(row.find("td:eq(2)").text().replace(".", ""), 10) < compareTo;						});					}				});								$("#defFilterFarm").click(function () {					trackClickEvent("FilterFarm");					var compareTo = parseInt($("#defFilterFarmText").val(), 10);					if (compareTo >= 0) {						filterGroupRows(function (row) {							var farmValue = row.find("td:eq(3)").text();							farmValue = parseInt(farmValue.substr(0, farmValue.indexOf("/")), 10);							return farmValue < compareTo;						});					}				});            }			 // SUPPORT OVERVIEW            else if (location.href.indexOf('type=support_detail') > -1 || location.href.indexOf('type=away_detail') > -1) {				overviewTable = $("#units_table");				tableHandler.init("units_table", {					hasBottomTotalRow: true				});								var isSupport = location.href.indexOf('type=support_detail') > -1;								var menu = "<table class='vis' width='100%'>";				menu += "<tr><th colspan=2>";				menu += "<input type=button id=defTotals value='" + trans.sp.defOverview.stackButton + "' title='" + trans.sp.defOverview.stackTooltip + "'>";				if (isSupport) {					menu += "&nbsp; <input type=text size=8 id=defFilterTotalPopValue value='" + user_data.restack.sufficient + "'>";					menu += "<select id=defFilterTotalPopComparer>";					menu += "<option value=-1>" + trans.sp.all.less + "</option><option value=1 selected>" + trans.sp.all.more + "</option></select>";					menu += "<input type=button id=defFilterTotalPop value='" + trans.sp.defOverview.stackFilter + "' title='" + trans.sp.defOverview.stackFilterTooltip + "'> &nbsp;| &nbsp;";									menu += trans.sp.defOverview.village + " <input type=text size=5 id=defFilterDistVillage value=''>";					menu += "<select id=defFilterDistType>";					menu += "<option value=1 selected>" + trans.sp.all.closer + "</option><option value=-1>" + trans.sp.all.further + "</option></select>";					menu += "&nbsp;F <input type=text size=3 id=defFilterDistanceValue value=" + user_data.restack.fieldsDistanceFilterDefault + ">";					menu += "<input type=button id=defFilterDist value='" + trans.sp.defOverview.distFilter + "' title='" + trans.sp.defOverview.distFilterTooltip + "'> &nbsp;| &nbsp;";									menu += " <input type=text size=8 id=defRestackTo value=" + user_data.restack.to + "> <input type=button id=defRestack value='" + trans.sp.defOverview.stackBBCodes + "' title='" + trans.sp.defOverview.stackBBCodesTooltip + "'>";					menu += "<br>";				}				menu += "<input type=button id=defHideEmpty value='" + trans.sp.defOverview.filterNoSupport + "' title='" + trans.sp.defOverview.filterNoSupportTooltip + "'> ";				menu += isSupport ? trans.sp.defOverview.extraFiltersSupport : trans.sp.defOverview.extraFiltersDefense;				menu += "<input type=checkbox id=defReverseFilter title='" + trans.sp.defOverview.extraFiltersReverse + "'" + (user_data.restack.filterReverse ? " checked" : "") + "> " + trans.sp.defOverview.extraFiltersInfo + " | ";				menu += "&nbsp; <input type=text size=3 id=defFilterDistanceValue value=" + user_data.restack.fieldsDistanceFilterDefault + "> <input type=button id=defFilterDistance value='" + trans.sp.defOverview.distFilter2 + "'>";				menu += "&nbsp; <span style='background-color: #ecd19a; border: 1px solid black' id='unitFilterBox'>";				menu += "&nbsp; <img src='graphic/unit/unit_snob.png' id=filtersnob>&nbsp; <img src='graphic/unit/unit_spy.png' id=filterspy>";				menu += "&nbsp; <img src='graphic/buildings/barracks.png' id=filterAttack>&nbsp;<img src='graphic/unit/def.png' id=filterDefense>&nbsp;<img id=filterSupport src='graphic/command/support.png'>&nbsp;";				menu += "</span>";				menu += "&nbsp; <input type=text size=12 id=defFilterTextValue value=''>";				menu += "<input type=button id=defFilterText value='" + trans.sp.defOverview.freeTextFilter + "'>";				menu += "&nbsp; <input type=button id=attackFilter value='" + trans.sp.defOverview.filterUnderAttack + "'>";								if (!isSupport) {					menu += "&nbsp; <input type=button id=defFilterBarbarian value='" + trans.sp.defOverview.barbarianFilter + "' title='" + trans.sp.defOverview.barbarianFilterTooltip + "'>";				}								menu += "</th></tr></table>";				$("#units_table").before(menu);								$("input.selectAll").replaceWith("<input type=checkbox id=selectAllVisible>");				$("#selectAllVisible").click(function () {					var isChecked = $(this).attr("checked") == "checked";					$("#units_table input.village_checkbox:hidden").attr("checked", false);					$("#units_table input.village_checkbox:visible").attr("checked", isChecked);				});								$("#defReverseFilter").change(function () {					var isChecked = $(this).is(":checked");					var defTrans = trans.sp.defOverview;					$("#unitFilterBox").find("img:eq(0)").attr("title", isChecked ? defTrans.nobleFilter : defTrans.nobleFilterRev);					$("#unitFilterBox").find("img:eq(1)").attr("title", isChecked ? defTrans.spyFilter : defTrans.spyFilterRev);					$("#unitFilterBox").find("img:eq(2)").attr("title", isChecked ? defTrans.attackFilter : defTrans.attackFilterRev);					$("#unitFilterBox").find("img:eq(3)").attr("title", isChecked ? defTrans.supportFilter : defTrans.supportFilterRev);									$("#unitFilterBox").find("img:eq(4)").attr("title", (isSupport ? defTrans.otherPlayerFilterFrom : defTrans.otherPlayerFilterTo).replace("{action}", isChecked ? defTrans.otherPlayerFilterShow : defTrans.otherPlayerFilterHide));					$("#defFilterText").attr("title", defTrans.freeTextFilterTooltip.replace("{villageType}", isSupport ? defTrans.filterTooltipVillageTypeSupporting : defTrans.filterTooltipVillageTypeSupported).replace("{filterType}", isChecked ? defTrans.freeTextFilterTooltipFilterTypeWith : defTrans.freeTextFilterTooltipFilterTypeWithout));					$("#defFilterDistance").attr("title", defTrans.distanceFilterTooltip.replace("{villageType}", isSupport ? defTrans.filterTooltipVillageTypeSupporting : defTrans.filterTooltipVillageTypeSupported).replace("{filterType}", !isChecked ? defTrans.distanceFilterTooltipFilterTypeCloser : defTrans.distanceFilterTooltipFilterTypeFurther));				});				$("#defReverseFilter").change();								function filterMainRows(filterStrategy, reverseFilter, unitsAwayStrategy, tag) {					if (!$("#defTotals").is(":disabled")) {						$("#defTotals").click();					}									var goners = $();					$("#units_table tr.grandTotal").each(function () {						if (!reverseFilter != !filterStrategy($(this), tag)) {							goners = goners.add($(this)).add($(this).next());											var prev = $(this).prev();							while (!prev.hasClass("units_away")) {								goners = goners.add(prev);								prev = prev.prev();							}											$("input:first", prev).val("");							goners = goners.add(prev);						} else if (unitsAwayStrategy != null) {							var prev = $(this).prev();							while (!prev.hasClass("units_away")) {								prev = prev.prev();							}							unitsAwayStrategy(prev, tag);						}					});					goners.hide();					$("#units_table th:first").text(trans.sp.defOverview.totalVillages.replace("{0}", $("#units_table tr.grandTotal:visible").size()));				}								// Hide rows not under attack				$("#attackFilter").click(function () {					trackClickEvent("FilterAttack");					var reverseFilter = true; // never reverse this filter!									if (!$("#defTotals").is(":disabled")) {						$("#defTotals").click();					}											var filterStrategy =						function (row) {							return $('td:first:not(:has(img[title=\'' + trans.tw.command.attack + '\']))', row).size() == 0;						};									var goners = $();					$("#units_table tr.units_away").each(function () {						if (!reverseFilter != !filterStrategy($(this))) {							goners = goners.add($(this));											var nextRow = $(this).next();							while (!nextRow.hasClass("grandTotal")) {								goners = goners.add(nextRow);								nextRow = nextRow.next();							}											$("input:first", this).val("");							goners = goners.add(nextRow).add(nextRow.next());						}					});					goners.hide();					$("#units_table th:first").text(trans.sp.defOverview.totalVillages.replace("{0}", $("#units_table tr.grandTotal:visible").size()));				});								$("#defFilterTotalPop").click(function () {					trackClickEvent("FilterFarm");					var reverseFilter = $("#defFilterTotalPopComparer").val() != "-1";					var compareTo = parseInt($("#defFilterTotalPopValue").val(), 10);									filterMainRows(function (row) { return (parseInt(row.attr("population"), 10) > compareTo); }, reverseFilter);				});								$("#defFilterDist").click(function () {					trackClickEvent("FilterDistanceToX");					var targetVillage = getVillageFromCoords($("#defFilterDistVillage").val(), true);					if (!targetVillage.isValid) {						alert(trans.sp.defOverview.distanceToVillageNoneEntered);						return;					}									var reverseFilter = !($("#defFilterDistType").val() != "-1");					var maxDistance = parseInt($("#defFilterDistanceValue").val(), 10);									$("#units_table").find("th:eq(1)").html(trans.sp.defOverview.distanceToVillage.replace("{0}", targetVillage.coord));									filterMainRows(						function (row, tag) {							var compareVillage = getVillageFromCoords(row.attr("village"));							tag.distance = getDistance(targetVillage.x, compareVillage.x, targetVillage.y, compareVillage.y, 'ram').fields;							return tag.distance > maxDistance;						}, reverseFilter,						function (mainRow, tag) {							mainRow.find("td:eq(1)").html("<b>" + trans.sp.defOverview.fieldsPrefix.replace("{0}", parseInt(tag.distance, 10)) + "</b>");						}, { distance: 0 });				});								function filterTable(rows, filterStrategy) {					if (!$("#defTotals").is(":disabled")) {						$("#defTotals").click();					}									var reverseFilter = $("#defReverseFilter").is(":checked");					var goners = $();					rows.each(function () {						if ($(this).attr("distance") != undefined) {							if (!reverseFilter != !filterStrategy($(this))) {								goners = goners.add($(this));							}						}					});					goners.hide();					$("#units_table th:first").text(trans.sp.defOverview.totalVillages.replace("{0}", $("#units_table tr.grandTotal:visible").size()));				}								$("#defRestack").click(function () {					trackClickEvent("BBCodeOutput");					if (!$("#defTotals").attr("disabled")) {						$("#defTotals").click();					}									var restackTo = parseInt($("#defRestackTo").val(), 10);					var counter = 0;									var request = "";					$("#units_table tr.grandTotal").each(function () {						if ($(this).is(":visible")) {							var total = parseInt($(this).attr('population'), 10);							if (restackTo - total > user_data.restack.requiredDifference) {								var villageCoords = $(this).attr("village");								counter++;								request += counter + "[village]" + villageCoords + "[/village] (" + parseInt((restackTo - total) / 1000, 10) + trans.sp.defOverview.thousandSuffix + ")\n";							}						}					});									if ($("#restackArea").size() == 0) {						$(this).parent().parent().parent().append("<tr><td><textarea cols=50 rows=10 id=restackArea>" + request + "</textarea></td><td>" + trans.sp.defOverview.freeText + "<br><textarea cols=50 rows=9></textarea></td></tr>");					} else {						$("#restackArea").val(request);					}				});								$("#defHideEmpty").click( function () {					trackClickEvent("FilterEmpty");					if (!$("#defTotals").is(":disabled")) {						$("#defTotals").click();					}									var goners = $();					$("#units_table tr.units_away").each(function () {						var mainRow = $(this);						var row = mainRow.next();						var toHide = true;						while (!row.hasClass("grandTotal")) {							if (row.is(":visible")) {								toHide = false;							}											row = row.next();						}										if (toHide) {							$("input:first", mainRow).val("");							goners = goners.add(mainRow).add(row.next()).add(row);						}					});					goners.hide();					$("#units_table th:first").text(trans.sp.defOverview.totalVillages.replace("{0}", $("#units_table tr.grandTotal:visible").size()));				});								$("#filtersnob, #filterspy").click( function () {					trackClickEvent("FilterSnobOrSpy");					var position = $.inArray($(this).attr("id").substr(6), world_data.units) + 1;					filterTable($("#units_table tr"), function (row) {						return row.find("td").eq(position).text() != "0";					});				});								// filter support from other players				$("#filterSupport").click( function () {					trackClickEvent("FilterSupport");					filterTable($("#units_table tr"), function (row) {						return row.find("td:first a").length != 2;					});				});								$("#filterAttack, #filterDefense").click( function () {					trackClickEvent("FilterOffOrDef");					var unitArray = $(this).attr('id') == "filterDefense" ? world_data.units_def : world_data.units_off;					filterTable($("#units_table tr"), function (row) {						var hideRow = false;						$("td:gt(0)", row).each(function (i) {							if (world_data.units[i] != undefined && world_data.units[i] != "heavy" && parseInt($(this).text(), 10) > 0 && $.inArray(world_data.units[i], unitArray) > -1) {								hideRow = true;								return false;							}						});										return hideRow;					});				});								$("#defFilterBarbarian").click( function () {					trackClickEvent("FilterBarbarian");					filterTable($("#units_table tr"), function (row) {						var text = row.find("td:first").text();						return text.match(/\(---\)\s+\(F\d+\)$/);					});					$("#defHideEmpty").click();				});								$("#defFilterText").click( function () {					trackClickEvent("FilterText");					var compareTo = $("#defFilterTextValue").val().toLowerCase();					if (compareTo.length > 0)						filterTable($("#units_table tr"), function (row) {							return row.text().toLowerCase().indexOf(compareTo) == -1;						});				});								$("#defFilterDistance").click(function () {					trackClickEvent("FilterDistance");					var maxDistance = $("#defFilterDistanceValue").val();					filterTable($("#units_table tr"), function (row) {						var distance = $(row).attr("distance");						return (distance != '' && parseInt(distance, 10) < maxDistance);					});				});								$("#defTotals").click(function () {					trackClickEvent("FilterTotalDef");					$(this).attr("disabled", true);					var rowColor = 0;					var goners = $();					$("#units_table").find("tr.units_away").each(function () {						// calculate total support						var firstCell = $(this).find("td:first");						var villageCoord = getVillageFromCoords(firstCell.find("span[id*='label_']").text());										rowColor++;						if (rowColor % 2 == 1) {							$(this).removeClass("row_a").addClass("row_b");						} else {							$(this).removeClass("row_b").addClass("row_a");						}										var grandTotal = 0;						var totals = [];						var nextRow = $(this).next();						while (nextRow.hasClass("row_a") || nextRow.hasClass("row_b")) {							var total = 0;							$("td:gt(0)", nextRow).each(function (i) {								var cellContent = $.trim($(this).text());								if (!(cellContent == '0' || i >= world_data.unitsPositionSize.length)) {									total += cellContent * world_data.unitsPositionSize[i];									if (totals[i] == undefined) {										totals[i] = parseInt(cellContent, 10);									} else {										totals[i] += parseInt(cellContent, 10);									}								}							});							grandTotal += total;							$("td:eq(" + (world_data.unitsPositionSize.length + 1) + ")", nextRow).text(formatNumber(total));											var supportedCell = $("td:first", nextRow);							var supportedVillage = getVillageFromCoords(supportedCell.text());							var distance = parseInt(getDistance(supportedVillage.x, villageCoord.x, supportedVillage.y, villageCoord.y, 'ram').fields, 10);							supportedCell.html(supportedCell.html() + ' <b>' + trans.sp.all.fieldsSuffix.replace("{0}", distance) + '</b>');							nextRow.attr("distance", distance);											if (rowColor % 2 == 1) {								nextRow.removeClass("row_a").addClass("row_b");							} else {								nextRow.removeClass("row_b").addClass("row_a");							}											nextRow = nextRow.next();						}										if (rowColor % 2 == 1) {							nextRow.removeClass("row_a").addClass("row_b");						} else {							nextRow.removeClass("row_b").addClass("row_a");						}										var troopCells = "";						for (var i = 0; i < world_data.unitsPositionSize.length; i++) {							if (typeof totals[i] !== 'undefined') {								troopCells += "<td>" + formatNumber(totals[i]) + "</td>";							} else {								troopCells += "<td><span class=hidden>0</span></td>";							}						}										var color = getStackColor(grandTotal, 30 * world_config.farmLimit);						color = "<td style='background-color: " + color + "; border:1px solid black'>" + formatNumber(grandTotal) + "</td>";										nextRow.before("<tr class='grandTotal " + (rowColor % 2 == 1 ? "row_b" : "row_a") + "' village='" + villageCoord.coord + "' population='" + grandTotal + "'><td>&nbsp;</td><td>" + (isSupport ? trans.sp.defOverview.totalFromOtherVillages : trans.sp.defOverview.totalInOtherVillages) + "</td>" + troopCells + color + "</tr><tr height=10></tr>");					});									goners.hide();				});            }			// COMMANDS OVERVIEW            else if (location.href.indexOf('mode=commands') > -1) {				overviewTable = $("#commands_table");				tableHandler.init("commands_table", {					hasBottomTotalRow: true				});								// Group attacks per village				var menu = "";				menu += "<table class=vis width='100%'>";				menu += "<tr><th colspan=" + (3 + world_data.units.length) + ">";				if (location.href.indexOf('type=all') > -1 || location.href.indexOf('&type=') == -1) {					menu += "<input type=button id=filterReturning value='" + trans.sp.commands.filterReturn + "'>&nbsp;";				}				menu += "<input type=checkbox id=sortSum " + (user_data.command.sumRow ? "checked" : "") + "> " + trans.sp.commands.totalRows + " ";				var isSupport = location.href.indexOf('type=support') > -1;				menu += "<input type=button id=sortIt value='" + trans.sp.commands.group + "'>";				menu += "&nbsp; <input type=button id=defRestack value='" + trans.sp.commands.bbCodeExport + "' title='" + trans.sp.commands.bbCodeExportTooltip + "'>";								menu += "<br>";				menu += "<input type=checkbox id=defReverseFilter title='" + trans.sp.commands.filtersReverse + "'> " + trans.sp.commands.filtersReverseInfo + ": ";				menu += "&nbsp; <span style='background-color: #ecd19a; border: 1px solid black' id='unitFilterBox'>";				menu += "&nbsp; <img src='graphic/unit/unit_snob.png' id=filtersnob>&nbsp; <img src='graphic/unit/unit_spy.png' id=filterspy>&nbsp; <img src='graphic/face.png' id=filterFake>&nbsp;";				menu += "</span>";				menu += "&nbsp; <input type=text size=12 id=defFilterTextValue value=''>";				menu += "<input type=button id=defFilterText value='" + trans.sp.commands.freeTextFilter + "'>";								menu += "&nbsp; <input type=textbox size=3 id=defFilterContinentText maxlength=2><input type=button id=defFilterContinent value='" + trans.sp.commands.continentFilter + "'>";								var commandListType = getQueryStringParam("type");								menu += "</th></tr>";				menu += "</table>";				$("#commands_table").before(menu);								$("#select_all").replaceWith("<input type='checkbox' id='selectAll'>");				$("#selectAll").click(function() {					var isChecked = $("#selectAll").attr("checked") == "checked";					$("#commands_table tr:visible").find(":checkbox").attr("checked", isChecked);				});								var offsetToUnits = 3;								$("#defReverseFilter").change( function () {					var isChecked = $(this).is(":checked");					var defTrans = trans.sp.commands;					$("#unitFilterBox").find("img:eq(0)").attr("title", !isChecked ? defTrans.nobleFilter : defTrans.nobleFilterRev);					$("#unitFilterBox").find("img:eq(1)").attr("title", isChecked ? defTrans.spyFilter : defTrans.spyFilterRev);					$("#unitFilterBox").find("img:eq(2)").attr("title", !isChecked ? defTrans.fakeFilter : defTrans.fakeFilterRev);									$("#defFilterContinent").attr("title", isChecked ? defTrans.continentFilterTooltip : defTrans.continentFilterTooltipReverse);									$("#defFilterText").attr("title", defTrans.freeTextFilterTooltip.replace("{filterType}", isChecked ? defTrans.freeTextFilterTooltipFilterTypeWith : defTrans.freeTextFilterTooltipFilterTypeWithout));				});									$("#defReverseFilter").change();				var hasGrouped = false;								// generate bb code export				$("#defRestack").click(function () {					trackClickEvent("BBCodeOutput");					var villages = [];					var request = {};					var filter = hasGrouped ? "tr.command:visible" : "tr:gt(0):visible";					$("#commands_table " + filter).each( function () {						var row = $(this);						var cells = $("td", row);						var firstCell = cells.first();						var commandType = firstCell.find("img:first").attr("src");						if (typeof commandType !== 'undefined'							&& commandType.indexOf("command/cancel.png") == -1 							&& commandType.indexOf("command/other_back.png") == -1 							&& commandType.indexOf("command/back.png") == -1) {														var village = getVillageFromCoords($.trim(firstCell.text()));							if (village.isValid) {								if (request[village.coord] == undefined) {									request[village.coord] = { village: village.coord, attacks: [], hasSupport: false, hasAttack: false };									villages.push(village.coord);								}												var unitsSent = {};								$.each(world_data.units,									function (i, val) {										unitsSent[val] = parseInt(cells.eq(offsetToUnits + i).text(), 10);									});												var isSupport = false;								if (commandListType == "support") {									isSupport = true;								}								else if (commandListType == "attack") {									isSupport = false;								} else {									isSupport = cells.first().has("img[src*='command/support.png']").size() == 1;								}												if (isSupport) {									request[village.coord].hasSupport = true;								} else {									request[village.coord].hasAttack = true;								}												request[village.coord].attacks.push({									isSupport: isSupport,									units: unitsSent,									unitsString: buildAttackString(null, unitsSent, null, isSupport, " ", user_data.command.bbCodeExport.requiredTroopAmount),									arrival: cells.eq(2).text(),									arrivalDate: getDateFromTodayTomorrowTW(cells.eq(2).text())								});							}						}					});									var requestsPer500 = [""];					var requestComposed = "";					for (var i = 0; i < villages.length; i++) {						var currentVillage = request[villages[i]];						var currentText = "";						currentText += "[spoiler][code]";						var attackCount = 0;						var supportCount = 0;						var lastAttack = null;						var largestAttack = 0;						var totalPop = 0;						for (var attackId = 0; attackId < currentVillage.attacks.length; attackId++) {							var currentAttack = currentVillage.attacks[attackId];							if (currentAttack.isSupport) {								supportCount++;								$.each(world_data.units, function (i, val) {									totalPop += currentAttack.units[val] * world_data.unitsPositionSize[i];								});							} else {								attackCount++;								if (lastAttack == null || lastAttack < currentAttack.arrivalDate) {									lastAttack = currentAttack.arrivalDate;								}							}							if (largestAttack < currentAttack.unitsString.length) {								largestAttack = currentAttack.unitsString.length;							}						}										for (var attackId = 0; attackId < currentVillage.attacks.length; attackId++) {							var currentAttack = currentVillage.attacks[attackId];							currentText += currentAttack.unitsString;							var extraTabs = (largestAttack - currentAttack.unitsString.length) / 1;							if (Math.ceil(extraTabs) == extraTabs) {								extraTabs = Math.ceil(extraTabs);							}							for (var tabs = 0; tabs < extraTabs + 1; tabs++) {								currentText += " ";							}							currentText += "\t" + twDateFormat(currentAttack.arrivalDate, true) + "\n";						}						currentText += "[/code][/spoiler]\n";										var headerTemplate;						if (!currentVillage.hasSupport && currentVillage.hasAttack) {							headerTemplate = trans.sp.commands.exportAttackHeader;						}						else if (currentVillage.hasSupport && !currentVillage.hasAttack) {							headerTemplate = trans.sp.commands.exportDefenseHeader;						} else {							headerTemplate = trans.sp.commands.exportCompleteHeader;						}										requestComposed +=							headerTemplate								.replace("{#}", attackCount)								.replace("{support#}", supportCount)								.replace("{totalStack}", formatNumber(totalPop))								.replace("{lastAttack}", currentVillage.hasAttack ? twDateFormat(lastAttack, true) : "")								.replace("{village}", "[village]" + villages[i] + "[/village]")								+ "\n " + currentText;										// splits per 500 [ characters (limit in TW)						var amountBracket = requestsPer500[requestsPer500.length - 1].match(/\[/g);						if (amountBracket != null && (requestComposed.match(/\[/g).length + amountBracket.length > 500)) {							requestsPer500.push("");						}						requestsPer500[requestsPer500.length - 1] += requestComposed;						requestComposed = "";					}									if ($("#textsArea").size() == 0) {						$(this).parent().parent().parent().append("<tr><td id=textsArea></td></tr>");					} else {						$("#textsArea").html("");					}					for (var i = 0; i < requestsPer500.length; i++) {						$("#textsArea").append("<textarea cols=50 rows=10 class=restackArea>" + requestsPer500[i] + "</textarea>");					}				});								function filterCommandRows(filterStrategy) {					// return true to hidethe row; false keep row visible (without reverse filter checkbox)					var reverseFilter = $("#defReverseFilter").is(":checked");					var goners = $();					var filter = hasGrouped ? "tr.command:visible" : "tr:gt(0):visible";					$("#commands_table " + filter).each( function () {						if ($("th", this).size() != 0) {							return;						}						if (!reverseFilter != !filterStrategy($(this))) {							goners = goners.add($(this));							$("input:eq(1)", this).val("");						}					});					goners.hide();									// Show totals					var amountOfCommandos = $("#commands_table " + filter).size();					if (hasGrouped) {						$("#commands_table tr.sumLine").hide();					} else {						amountOfCommandos--;					}									$("#commands_table th:first").text(trans.sp.commands.tableTotal.replace("{0}", amountOfCommandos));					$("#amountOfAttacks").text(amountOfCommandos);					if ($("#amountOfAttacks").size() == 1) {						$("#amountOfTargets").val("???");					}										$("#commands_table tr").not(":visible").find(":checkbox").attr("checked", false);				}								// Filter sent back, returning and cancelled commands				$("#filterReturning").click(function () {					$(this).attr("disabled", "disabled");					trackClickEvent("FilterReturning");					filterCommandRows( function (row) {						var firstCellImage = $("td:first img:first", row).attr("src");						return firstCellImage.indexOf("command/other_back.png") != -1 						|| firstCellImage.indexOf("command/back.png") != -1						|| firstCellImage.indexOf("command/cancel.png") != -1;					});				});								$("#defFilterText").click(function () {					trackClickEvent("FilterText");					var compareTo = $("#defFilterTextValue").val().toLowerCase();					if (compareTo.length > 0) {						filterCommandRows(function (row) {							return row.text().toLowerCase().indexOf(compareTo) == -1;						});					}				});								$("#filterspy").click(function () {					trackClickEvent("FilterSpy");					var position = $.inArray($(this).attr("id").substr(6), world_data.units);					filterCommandRows(function (row) {						if (row.find("td").eq(position + offsetToUnits).text() == "0") {							return false;						}						var totalScout = row.find("td").eq(position + offsetToUnits).text();										var cell = row.find("td:eq(" + (offsetToUnits - 1) + ")");						for (var i = 0; i < world_data.units.length; i++) {							cell = cell.next();							if (totalScout < cell.text()) {								return false;							}						}						return true;					});				});								$("#filtersnob").click(function () {					trackClickEvent("FilterSnob");					var position = $.inArray($(this).attr("id").substr(6), world_data.units) + offsetToUnits;					filterCommandRows(function (row) {						return row.find("td").eq(position).text() == "0";					});				});								$("#filterFake").click(function () {					trackClickEvent("FilterFake");					var maxPop = user_data.command.filterFakeMaxPop;					filterCommandRows(function (row) {						var total = 0;						var cell = row.find("td:eq(" + (offsetToUnits - 1) + ")");						for (var i = 0; i < world_data.units.length; i++) {							cell = cell.next();							total += parseInt(cell.text(), 10);											// An attack with a noble is (almost) never a fake:							if (i == world_data.units.length - 1 && cell.text() != "0") {								return false;							}											if (total > maxPop) {								return false;							}						}						return true;					});				});								$("#defFilterContinent").click(function () {					trackClickEvent("FilterContinent");					var continent = parseInt($("#defFilterContinentText").val(), 10);					if (!isNaN(continent)) {						filterCommandRows(function (row) {							var village = getVillageFromCoords(row.find("td:first").text());							var village2 = getVillageFromCoords(row.find("td:eq(1)").text());							if (!village.isValid || !village2.isValid) {								return true;							}							return village.continent() != continent && village2.continent() != continent;						});					}				});								// Sort/group incoming attacks				$("#sortIt").click(function () {					trackClickEvent("Sort");					hasGrouped = true;					var newTable = "";					var targets = [];					var amountOfCommandos = 0;					var sum = $('#sortSum').attr('checked') == "checked";					$("#filterReturning").attr("disabled", true);									$("#commands_table").find("tr:gt(0):visible").each(function () {						var target = $("span[id*='labelText']", this).text();						var village = getVillageFromCoords(target);						if (village.isValid) {							amountOfCommandos++;							if (targets[village.coord] == undefined) {								targets.push(village.coord);								targets[village.coord] = new Array();							}							targets[village.coord].push($(this));						}					});									var mod = 0;					if (isSupport) {						$.each(targets, function (i, v) {							mod++;							var amount = 0;							var totalDef = new Array();							totalDef['pop'] = 0;							$.each(world_data.units, function (index, value) { totalDef[value] = 0; });											$.each(targets[v], function (index, value) {								var villageId = $("td:eq(1) a:first", value).attr("href").match(/id=(\d+)/)[1];								newTable += "<tr class='command nowrap row_" + (mod % 2 == 0 ? 'b' : 'a') + (villageId == game_data.village.id ? " selected" : "") + "'>" + value.html() + "</tr>";								amount++;												var unitAmounts = $("td:gt(2)", value);								$.each(world_data.units, function (iUnit, vUnit) {									var amount = parseInt(unitAmounts.eq(iUnit).html(), 10);									if (amount == 1) {										totalDef[vUnit] = amount;									} else {										totalDef[vUnit] += amount;									}									totalDef['pop'] += amount * world_data.unitsSize['unit_' + vUnit];								});							});											if (sum) {								newTable += "<tr class='sumLine'><td align=right colspan=3><b>" + trans.sp.commands.totalRowsText.replace("{0}", amount).replace("{1}", formatNumber(totalDef['pop'])) + "&nbsp;</b></td>";								$.each(world_data.units, function (iUnit, vUnit) {									newTable += "<td>" + (totalDef[vUnit] == 0 ? "&nbsp;" : formatNumber(totalDef[vUnit])) + "</td>";								});								newTable += "</tr>";							}						});					} else {						// attacks (meaning: no support commands)						$.each(targets, function (i, v) {							mod++;							var amount = 0;							var lastArrival = '';							$.each(targets[v], function (index, value) {								var villageId = $("td:eq(1) a:first", value).attr("href").match(/id=(\d+)/)[1];								q(villageId);															var currentArrival = $(value).find("td:eq(2)").text();								if (lastArrival == currentArrival) {									// Don't show when it's on the same second									// Only practical on full second worlds really									newTable += "<tr class='command nowrap row_" + (mod % 2 == 0 ? 'b' : 'a') + (villageId == game_data.village.id ? " selected" : "") + "'>";									$(this).find("td").each(function (i) {										if (i == 2) {											newTable += "<td>&nbsp;</td>";										}										else if ($(this).text() == 0) {											newTable += "<td class=hidden>0</td>";										} else {											newTable += "<td>" + $(this).html() + "</td>";										}									});									newTable += "</tr>";								}								else {									newTable += "<tr class='command nowrap row_" + (mod % 2 == 0 ? 'b' : 'a') + (villageId == game_data.village.id ? " selected" : "") + "'>" + value.html() + "</tr>";								}								lastArrival = currentArrival;								amount++;							});											if (sum) {								newTable += "<tr class='sumLine'><td align=right colspan=" + (3 + world_data.units.length) + ">" + amount + "&nbsp;</td></tr>";							}						});					}									var menu = $("#commands_table tr").first().html();					$("#commands_table").html("<table id='commands_table' class='vis'>" + menu + newTable + "</table>");									// total number of attacks					if ($("#amountOfAttacks").size() == 0) {						var totalDesc = (isSupport ? trans.sp.commands.totalSupport : trans.sp.commands.totalAttack);						var totalVillagesDesc = isSupport ? trans.sp.commands.totalVillagesSupport : trans.sp.commands.totalVillagesAttack;						var pageSize = $("input[name='page_size']");						if (pageSize.size() == 0) {							pageSize = $("input[type='submit']:last");							pageSize.after("<table class=vis><tr class='row_a'><th>" + totalVillagesDesc + "</th><td><input type=text size=5 value=" + targets.length + " id=amountOfTargets></td></tr><tr class='row_a'><th>" + totalDesc + ":</th><td id='amountOfAttacks'>" + amountOfCommandos + "</td></tr></table>");						} else {							pageSize[0].id = "amountOfTargets";							pageSize.parent().prev().text(totalVillagesDesc);							pageSize = pageSize.val(targets.length).parent().parent().parent();							pageSize.append('<tr><th colspan=2>' + totalDesc + ':</th><td id="amountOfAttacks">' + amountOfCommandos + '</td></tr>');						}					} else {						$("#amountOfTargets").val(targets.length);						$("#amountOfAttacks").text(amountOfCommandos);					}				});            }			// INCOMINGS OVERVIEW            else if (location.href.indexOf('mode=incomings') > -1) {				overviewTable = $("#incomings_table");				tableHandler.init("incomings_table", {					hasBottomTotalRow: true				});								// Group attacks per village				var menu = "";				menu += "<table width='100%'>";				menu += "<tr><th colspan=6>";				menu += "<input type=button id=sortIt value='" + trans.sp.incomings.dynamicGrouping + "'>";				menu += "&nbsp;&nbsp; <input type=checkbox id=sortShowTotalRow " + (user_data.command.sumRow ? "checked" : "") + "> " + trans.sp.incomings.summation + " ";				menu += "<input type=button id=sortQuick value='" + trans.sp.incomings.fastGrouping + "'>";				menu += "<input type=button id=filterAttack value='" + trans.sp.incomings.showNewIncomings + "'>";				menu += "</th></tr>";				menu += "</table>";				$("#incomings_table").before(menu);								$("#select_all").replaceWith("<input type='checkbox' id='selectAll'>");				$("#selectAll").click(function() {					var isChecked = $("#selectAll").attr("checked") == "checked";					$("#incomings_table tr:visible").find(":checkbox").attr("checked", isChecked);				});								// Amount of attacks				function showAmountOfAttacks(amountOfVillages, amountOfCommands) {					if ($("#amountOfAttacks").size() == 0) {						var pageSize = $("input[name='page_size']");						pageSize.parent().prev().text(trans.sp.commands.totalVillagesAttack);						pageSize = pageSize.val(amountOfVillages).parent().parent().parent();						pageSize.append('<tr><th colspan=2 id="amountOfAttacks">' + trans.sp.incomings.amount + '</th><td>' + amountOfCommands + '</td></tr>');					}										$("#incomings_table tr").not(":visible").find(":checkbox").attr("checked", false);				}								// Sort incoming attacks				$("#sortIt").click(function () {					this.disabled = true;					$("#sortQuick").attr("disabled", true);					trackClickEvent("Sort");									var rows = $("#incomings_table").find("tr:gt(0):visible").not("tr:last");					rows.sortElements(function (a, b) {						a = getVillageFromCoords($("td:eq(1)", a).text());						b = getVillageFromCoords($("td:eq(1)", b).text());										return (a.x * 1000 + a.y) > (b.x * 1000 + b.y) ? 1 : -1;					});									var amountOfVillages = 0;					var current = "";					rows.each(function () {						var village = $("td:eq(1)", this);						if (current != village.text()) {							current = village.text();							amountOfVillages++;						}						var type = amountOfVillages % 2 == 0 ? 'row_a' : 'row_b';												var villageId = village.find("a:first").attr("href").match(/village=(\d+)/)[1];						this.className = type + (villageId == game_data.village.id ? " selected" : "");					});									showAmountOfAttacks(amountOfVillages, rows.size());				});								// Quick sort: performs faster but also freezes the screen (ie no countdowns)				// --> This might also be good in case the page is refreshing too often otherwise				$("#sortQuick").click(function () {					trackClickEvent("SortQuick");					this.disabled = true;					$("#sortIt").attr("disabled", true);									var newTable = "";					var targets = [];					var commandCounter = 0;					var addTotalRow = $('#sortShowTotalRow').attr('checked') == "checked";									$("#incomings_table").find("tr:gt(0)").each(function () {						var target = $("td:eq(1)", this).text();						var village = getVillageFromCoords(target);						if (village.isValid) {							commandCounter++;							if (targets[village.coord] == undefined) {								targets.push(village.coord);								targets[village.coord] = new Array();							}							targets[village.coord].push($(this));						}					});									var mod = 0;					$.each(targets, function (i, v) {						mod++;						var amount = 0;						$.each(targets[v], function (index, row) {							var villageId = row.find("td:eq(1) a:first").attr("href").match(/village=(\d+)/)[1];									newTable += "<tr class='nowrap row_" + (mod % 2 == 0 ? 'b' : 'a') 								+ (villageId == game_data.village.id ? " selected" : "") + "'>" 								+ row.html() + "</tr>";							amount++;						});										if (addTotalRow) {							newTable += "<tr><td align=right colspan=6>" + amount + "&nbsp;</td></tr>";						}					});									var menu = $("#incomings_table tr").first().html();					$("#incomings_table").html("<table id='incomings_table' class='vis'>" + menu + newTable + "</table>");									showAmountOfAttacks(targets.length, commandCounter);				});								$("#filterAttack").click(function () {					trackClickEvent("FilterNewAttacks");					var goners = $();					$("#incomings_table tr:gt(0)").not("tr:last").each(function() {						if ($.trim($("td:first", this).text()) != trans.tw.command.attack) {							goners = goners.add($(this));							$(":checkbox", this).attr("checked", false);						}					});					goners.hide();				});            }        }		// RALLYPOINT PLACE        else if (location.href.indexOf('screen=place') > -1) {			// RALLYPOINT CONFIRM			if ($("#attack_name").size() > 0) {			// automatically focus OK button when attacking			if (user_data.proStyle && user_data.confirm.autoAttackFocus) {				$("input[name='submit']").focus();			}						// reorder the page			if (user_data.proStyle) {				$("#content_value table:first").css("width", 500);							// Merge nightbonus & tribe claim statements (for OK button placement)				if (user_data.proStyle && (user_data.confirm.replaceTribeClaim || user_data.confirm.replaceNightBonus)) {					var header = $("#content_value h2:first");					var claim = $("h3.error");					if (claim.size() != 0) {						claim.each(function() {							var $this = $(this);							$this.hide();							header.addClass("error").text(header.text() + " - " + $this.text());						});					}				}			}						// extra attack button (always on the same place)			if (user_data.confirm.addExtraOkButton) {				$("#content_value h2:first").prepend("<input type=submit style='font-size: 10pt' id=focusPlaceHolder value='" + $("#troop_confirm_go").val() + "'><br>");				$("#focusPlaceHolder").click(function () {					$(this).attr("disabled", "disabled");					$("#troop_confirm_go").click();				});			}						// Catapult building images			if (user_data.confirm.addCatapultImages && $("#save_default_attack_building").length == 1) {				var dropdown = $("select[name='building']");				var buildingImages = "";								dropdown.find("option").each(function(index, value) {					buildingImages += "<img class='catapultSwitcher' title='"+trans.sp.command.catapultImageTitle+"' building='"+$(value).val()+"' src='http://cdn2.tribalwars.net/graphic/buildings/" + $(value).val() + ".png'> ";				});								dropdown.parent().parent().before("<tr><td colspan=4>"+buildingImages+"</td></tr>");				$("img.catapultSwitcher").click(function() {					dropdown.val($(this).attr("building"));				});			}						var attackFrame = $("#content_value");			var infoTable = $("table.vis:first td:odd", attackFrame);			var targetVillage = infoTable.first().text();						// remember last attack			// saved at the confirmation page so that we can't save			// invalid coordinates			var village = getVillageFromCoords(targetVillage);			if (village.isValid) {				pers.set("lastVil", village.coord);			}						if (user_data.attackAutoRename) {				var isAttack = $("input[name='attack']").val() == "true";							var isBarbarian = infoTable.size() == (isAttack ? 4 : 3);				var player = (isBarbarian ? '' : infoTable.eq(1).text());							var unitsSent = {};				$.each(world_data.units, function (i, val) {					unitsSent[val] = parseInt($("input[name='" + val + "']", attackFrame).val(), 10);				});				var unitsCalc = calcTroops(unitsSent);								// compare runtime with dodgetime				var dodgeCookie = pers.getCookie("sanguDodge" + getQueryStringParam("village"));				if (dodgeCookie) {					dodgeCookie = dodgeCookie.split("~");					var durationCell = $("#content_value table.vis:first td:contains('" + trans.tw.command.walkingTimeTitle + "')").next();					var attackRunTime = getTimeFromTW(durationCell.text());					var dodgeTime = getTimeFromTW(dodgeCookie[1]);								var runtimeIsOk = attackRunTime.totalSecs >= dodgeTime.totalSecs;					var diffSecs = (attackRunTime.totalSecs - dodgeTime.totalSecs);								var dodgeCellText = "<table border=0 cellpadding=0 cellspacing=0 width='1%'><tr>";					dodgeCellText += "<td width='25%' align=center>" + durationCell.text() + "</td>";					dodgeCellText += "<td width='50%' align=center><b>" + (runtimeIsOk ? "&gt;&gt;&gt;" : "&lt;&lt;&lt;") + "</b></td>";					dodgeCellText += "<td width='25%' align=center nowrap>" + dodgeCookie[1] + "&nbsp;";					if (diffSecs > 0) {						dodgeCellText += trans.sp.command.dodgeMinuteReturn.replace("{minutes}", prettyDate(diffSecs * 2000, true)); // 2000 = Method expects milliseconds and distance is walked 2 times!					}					dodgeCellText += "</td>";								dodgeCellText += "</tr></table>";					durationCell.html(dodgeCellText);								if (!runtimeIsOk) {						durationCell.find("table").attr("title", trans.sp.command.dodgeNotFarEnough).css("background-color", user_data.colors.error).find("td").css("background-color", user_data.colors.error);					}								if (dodgeCookie[0] != "unit_" + unitsCalc.getSlowest()) {						$("h2:first", attackFrame).css("background-color", user_data.colors.error);					}				} else {					// If a dodgecookie is in use, nightbonus etc isn't relevant					unitsCalc.colorIfNotRightAttackType($("h2:first", attackFrame), isAttack);					var arrivalTime = getDateFromTodayTomorrowTW($.trim($("#date_arrival").text()));					if (user_data.proStyle && user_data.confirm.replaceNightBonus && isDateInNightBonus(arrivalTime)) {						$("#date_arrival").css("background-color", user_data.colors.error).css("font-weight", "bold");					}				}									// rename attack command				var villageCoord = $("input[name='x']", attackFrame).val() + '|' + $("input[name='y']", attackFrame).val();				var sent = buildAttackString(villageCoord, unitsSent, player, !isAttack);				document.title = game_data.village.coord + " -> " + sent;				sent = (isAttack ? trans.tw.command.attackOn : trans.tw.command.supportFor) + targetVillage + "\\" + sent;							var rand = Math.floor(Math.random() * 1000);				pers.setCookie("attRen" + rand, game_data.village.id + '_' + sent, 10);			}			}			// RALLYPOINT UNITS THERE			else if (location.href.indexOf('mode=units') > -1 && location.href.indexOf('try=back') == -1) {			var vilHome = getVillageFromCoords(game_data.village.coord);			if ($("#units_away").size() != 0) {				// Troops in other villages				var otherUnitsTable = $("#units_away").width("100%");				$("tr:first", otherUnitsTable).append("<th>" + trans.sp.place.distance + "</th><th>" + trans.sp.place.backOn + "</th>");				otherUnitsTable.find("tr:gt(0):even").each( function () {					var row = $(this);					var villageCoord = getVillageFromCoords(row.find("td:eq(1)").text());								if (!villageCoord.isValid) {						row.append("<th>&nbsp;</th><th>&nbsp;</th>");					} else {						var slowestUnit = null;						var slowestUnitName = null;						$.each(world_data.units, function (i, val) {							var amount = $("td:eq(" + (i + 2) + "), th:eq(" + (i + 1) + ")", row).text();							if (amount != '0') {								if (slowestUnit == null || slowestUnit < world_data.unitsSpeed['unit_' + val]) {									slowestUnitName = val;									slowestUnit = world_data.unitsSpeed['unit_' + val];								}							}						});									var fields = getDistance(vilHome.x, villageCoord.x, vilHome.y, villageCoord.y, slowestUnitName);						var extraColumns = "<td align=right>" + parseInt(fields.fields, 10) + "</td>";						extraColumns += "<td>" + twDateFormat(fields.arrivalTime) + "</td>";									row.append(extraColumns);					}				});			}						// Calculate distance and walkingtime to the villages			var unitsTable = $("form table:first");			$("tr:first", unitsTable).append('<th width="50"><img src="graphic/face.png" title="' + trans.sp.all.population + '" alt="" /></th><th>' + trans.sp.place.distance + '</th><th>' + trans.sp.place.backOn + '</th>');			unitsTable.find("tr:gt(0)").each(function () {				var pop = 0;				var row = $(this);				var slowestUnit = null;				var slowestUnitName = null;							$.each(world_data.units, function (i, val) {					var amount = $("td:eq(" + (i + 1) + "), th:eq(" + (i + 1) + ")", row).text();					if (amount != '0') {						pop += amount * world_data.unitsPositionSize[i];									if (slowestUnit == null || slowestUnit < world_data.unitsSpeed['unit_' + val]) {							slowestUnitName = val;							slowestUnit = world_data.unitsSpeed['unit_' + val];						}					}				});							var villageCoord = getVillageFromCoords(row.find("td:first").text());				var color = getStackColor(pop, 30 * world_config.farmLimit);							if (color != "transparant") {					$(this).append("<td align=right style='background-color: " + color + "'>" + formatNumber(pop) + "</td><td colspan=2>&nbsp;</td>");				} else {					var extraColumns = '<td align=right>' + formatNumber(pop) + '</td>';					if (!villageCoord.isValid) {						extraColumns += "<td colspan=2 align=right>&nbsp;</td>";					} else {						//q(vilHome.x + ':' + slowestUnitName);						var dist = getDistance(vilHome.x, villageCoord.x, vilHome.y, villageCoord.y, slowestUnitName);						var fields = parseInt(dist.fields, 10);						extraColumns += "<td align=right>" + fields + "</td><td>" + twDateFormat(dist.arrivalTime) + "</td>";						$("td:first", this).append("&nbsp; <b>" + trans.sp.all.fieldsSuffix.replace("{0}", fields) + "</b>");						$(this).addClass("toSort").attr("fields", fields);					}					$(this).append(extraColumns);				}			});						var checkboxAmount = $("input[type='checkbox']", unitsTable);			if (checkboxAmount.size() == 1) {				// village has just been taken over? auto check checkbox				checkboxAmount.attr("checked", true);			}						// Sort on distance			unitsTable.find("tr.toSort").sortElements(function (a, b) {				return parseInt($(a).attr("fields"), 10) < parseInt($(b).attr("fields"), 10) ? 1 : -1;			});						// are there incomings on the supporting villages?			if (server_settings.ajaxAllowed)			unitsTable.find("tr.toSort").each( function () {				var row = $(this);				var villageUrl = $("a:first", this).attr("href");				ajax(villageUrl, function (villageDetails) {					var villageOwner = $("table.vis:first tr:eq(3) a", villageDetails);					if (villageOwner.text() != game_data.player.name) {						$("td:first a", row).after(" [" + villageOwner.outerHTML() + "]");					} else {						var incomingTable = $("table th:contains('" + trans.tw.overview.incomingTroops + "')", villageDetails);						if (incomingTable.size() > 0) {							incomingTable = incomingTable.parent().parent();							var incomingRows = $("tr:has(img[src*='attack.png'])", incomingTable);							if (incomingRows.size() > 0) {								var firstAttack = incomingRows.eq(0);								var timeLeft = $("td:eq(2)", firstAttack).text();								var arrivalDate = $("td:eq(1)", firstAttack).text();											var lastAttack = incomingRows.last();								var timeLeftLast = $("td:eq(2)", lastAttack).text();								var arrivalDateLast = $("td:eq(1)", lastAttack).text();											var amount = incomingRows.size();											var attacksDesc;								if (amount == 1) {									attacksDesc = trans.sp.place.onlyAttack									.replace("{timeLeftFirst}", timeLeft)									.replace("{arrivalDateFirst}", arrivalDate);								} else {									attacksDesc = trans.sp.place.multipleAttack									.replace("{timeLeftFirst}", timeLeft)									.replace("{arrivalDateFirst}", arrivalDate)									.replace("{timeLeftLast}", timeLeftLast)									.replace("{arrivalDateLast}", arrivalDateLast)									.replace("{amount}", amount);								}											$("td:first input", row).after("&nbsp; <img src='graphic/command/attack.png' title='" + attacksDesc + "'>");							}						}					}				});			});			}			// RALLY POINT (DEFAULT)			else {			//Wider table			if (user_data.rallyPointAttackBoxWidth != null && user_data.rallyPointAttackBoxWidth > 0) {				var commandsTable = $("h3:contains('" + trans.tw.place.troopMovements + "')");				if (commandsTable.size() > 0) {					commandsTable = commandsTable.next();					$("th[width='250']", commandsTable).attr("width", user_data.rallyPointAttackBoxWidth);				}			}						// Auto rename attacks			if (user_data.attackAutoRename) {				// Less then ideal solution:				// Does work properly when sending many attacks (ie snobtrain)				// In confirm.js they are saved as a cookie (with expiration)				var cooks = document.cookie.split("; ");				var x;				for (x = 0; x < cooks.length; x++) {					var cookie = cooks[x];					if (cookie.indexOf("attRen") == 0) {						var val = cookie.substr(cookie.indexOf("=") + 1);						var thisVil = val.substr(0, val.indexOf('_'));						val = val.substr(val.indexOf('_') + 1);						var id = val.substr(0, val.indexOf("\\"));						var msg = val.substr(val.indexOf("\\") + 1);									if (id.length > 0 && thisVil == game_data.village.id) {							var rename = $("input[value='" + id + "']");							if (rename.size() > 0) {								pers.setCookie(cookie.substr(0, cookie.indexOf("=")), "", 0);								rename.val(msg).next().click();							}						}					}				}			}						// Spice up rally point:			// Read troops available			var units = [];			units['total'] = 0;			$("#units_form .unitsInput").each(function () {				var amount = $(this).next().text().substr(1);				units[this.name] = parseInt(amount.replace(")", ""), 10);				units['total'] += units[this.name] * world_data.unitsSize['unit_'+this.name];			});						// Add new menu elements			/*if (user_data.place.newWindow.active) {				var menuTable = $("#content_value table.vis:first");				var newMenu = "<br><table class=vis width='100%'><tr><th>Sangu</th></tr>";				newMenu += "<tr><td><a href='#'>" + trans.sp.place.newWindow +"</a></td></tr>";				newMenu += "</table>";				menuTable.after(newMenu);			}*/						// Show current selected speed + ability to change active speed			var vilHome = getVillageFromCoords(game_data.village.coord);			var speedCookie = spSpeedCookie();			$("#units_form a img").click(function () {				var unit = this.src;				unit = unit.substr(unit.lastIndexOf('/') + 1);				unit = unit.substr(0, unit.lastIndexOf('.'))				speedCookie = spSpeedCookie(unit);				$("#units_form a img").css("border", "0px").filter("img[src*='" + unit + "']").css("border", "3px red solid");							// lastvil				var coord = getVillageFromCoords(pers.get("lastVil"));				if (coord.isValid) {					var dist = getDistance(coord.x, vilHome.x, coord.y, vilHome.y, speedCookie);					$("#lastVilTime")[0].innerHTML = dist.html;				}							// targetVillage				coord = getVillageFromCoords(spTargetVillageCookie());				if (coord.isValid) {					dist = getDistance(coord.x, vilHome.x, coord.y, vilHome.y, speedCookie);					$("#targetVilTime")[0].innerHTML = dist.html;				}						}).filter("img[src*='" + speedCookie + "']").css("border", "3px red solid");						var cookie = pers.get("lastVil");			var coord = getVillageFromCoords(cookie);			if (coord.isValid) {				var dist = getDistance(coord.x, vilHome.x, coord.y, vilHome.y, speedCookie);				var htmlStr = printCoord(coord, "&raquo; " + trans.sp.all.last + ": " + coord.x + "|" + coord.y);				htmlStr += " &nbsp; <span id=lastVilTime>" + dist.html + "</span>";				$("#units_form").append(htmlStr);			}						// change text of existing 'Last' village			var existingLastLink = $("#target_attack").parent().prev().find("a:last");			if (existingLastLink.size() != 0) {				var regXY = existingLastLink.attr("onclick").toString().match(/val\((\d+)\);\$\('#inputy'\)\.val\((\d+)\)/);				if (regXY != null) {					htmlStr = printCoord({x: regXY[1], y: regXY[2]}, "&raquo; " + regXY[1] + "|" + regXY[2]);					existingLastLink.attr("title", existingLastLink.text().substr(2));					existingLastLink.html(htmlStr);				}			}						// Add target village			var targetVillage = getVillageFromCoords(spTargetVillageCookie());			if (targetVillage.isValid) {				var dist = getDistance(targetVillage.x, vilHome.x, targetVillage.y, vilHome.y, speedCookie);				$("#units_form").append("<br>" + printCoord(targetVillage, "&raquo; " + trans.sp.all.target + ": " + targetVillage.x + "|" + targetVillage.y) + " &nbsp;<span id=targetVilTime>" + dist.html + "</span>");							if (user_data.alternativeTargetPosition) {					var htmlStr = printCoord(targetVillage, "&raquo; " + targetVillage.x + "|" + targetVillage.y);					$("#target_attack").parent().prev().append(htmlStr);				}			}						// Add extra links to "All troops"			function createRallyPointScript(linksContainer, unitLoop, name, min, checkFunction, tag) {				send = {};				$.each(unitLoop, function (i, v) {					if (units[v] >= min) {						send[v] = checkFunction(units[v], v, tag);					}				});				linksContainer.append("&nbsp; &nbsp;<a href='#' onclick='" + fillRallyPoint(send) + "; return false'>" + name + "</a>");			}						var villageType = calcTroops(units);			var linksContainer = $('#selectAllUnits').parent().attr("colspan", 4);						// add fake attack			var minFake = 0;			if (world_config.hasMinFakeLimit) {				minFake = getBuildingPoints();				minFake *= world_config.minFake;				if (units.ram > 0) {					minFake -= world_data.unitsSize['unit_ram'];				}			}			 			if (user_data.fakePlaceLink && units['total'] >= minFake) {				createRallyPointScript(linksContainer, world_data.units, user_data.attackLinkNames.fake, 0, function (amount, v, tag) {					if ((v == 'ram' || v == 'catapult') && !tag.rammed && amount > 0) {						tag.rammed = true;						return 1;					}										if (v == 'snob' || tag.toSend <= 0 || amount == 0) {						return 0;					}								if (user_data.fakePlaceExcludeTroops.indexOf(v) > -1) {						return 0;					}								var farmSize = world_data.unitsSize['unit_' + v];					if (amount * farmSize > tag.toSend) {						amount = Math.ceil(tag.toSend / farmSize);					}					tag.toSend -= amount * farmSize;					if (v == 'sword' && amount > 0) {						tag.toSend++;						amount--;					}								return amount;				}, { toSend: minFake, rammed: false });			}						if (units['total'] > 0)			$.each(user_data.customPlaceLinks, function (i, v) {				if (v.active && villageType.isMatch(v.type)) { 					// villageType: off, def, all 					if (v.required == undefined || units[v.required[0]] >= v.required[1]) {						// requires certain amount of troops 						if (v.totalPop == undefined) {							// work with absolute numbers							createRallyPointScript(linksContainer, world_data.units, v.name, 0, function (amount, unitVal, tag) {								//q(v + ' - SEND:' + tag[v] + '; amount=' + amount + ';');								var send = tag[unitVal];								if (send != undefined && amount > 0) {									//q("send: " + send + " // amount: " + amount + " // unitVal: " + unitVal); 									if (send < 0) {										send = amount + send;										if (send < 0) {											send = 1;										}									}									if ((amount - send) * world_data.unitsSize['unit_' + unitVal] < tag.sendAlong) {										send = amount;									}									if (send > 0 && !tag.ignoreNobles) {										$.each(user_data.nobleSupport, function (i, val) {											if (unitVal == val.Unit && villageType.isMatch(val.VillageType)) {												send -= Math.ceil(units.snob * (val.Population / world_data.unitsSize['unit_' + unitVal]));											}										});									}									//if (unitVal == 'light') q(send);												if (send > amount) {										return amount;									}									if (send > 0) {										return send;									}								}								return 0;							}, v);													} else { // do automatic calculation which division of troops to select							////{ active: true, type: 'def', name: 'HelftZc', totalPop: 10000, divideOver: ['spear', 'heavy'] },							// TODO this doesn't yet work, does it?							// Probably not active...							var totalPop = 0;							$.each(v.divideOver, function (i, val) { totalPop += units[val] * world_data.unitsSize['unit_' + val]; });										createRallyPointScript(linksContainer, world_data.units, v.name, 0, function (amount, unitVal, tag) {								if ($.inArray(unitVal, tag.divideOver) == -1) {									return 0;								}								if (totalPop < tag.totalPop) {									return amount;								}											var currentUnitPercentage = (amount * world_data.unitsSize['unit_' + unitVal]) / totalPop;								return Math.floor(amount * currentUnitPercentage);							}, v);						}					}				}			});						if (units.spy >= user_data.scoutVillage && user_data.scoutPlaceLinks != null && user_data.scoutPlaceLinks.length > 0) {				$.each(user_data.scoutPlaceLinks, function (i, v) {					if (units.spy >= v) {						createRallyPointScript(linksContainer, ["spy"], user_data.attackLinkNames.scout + v, 0, function (amount, v, tag) {							return tag;						}, v);					}				});			}						if (units.snob > 0 && user_data.noblePlaceLink) {				createRallyPointScript(linksContainer, world_data.units, user_data.attackLinkNames.nobleMax, 0, function (amount, v, tag) {					if (v == 'snob') {						return 1;					}					if (tag > 0) {						var returned = null;						$.each(user_data.nobleSupport, function (i, val) {							if (v == val.Unit && villageType.isMatch(val.VillageType)) {								returned = amount - Math.ceil((tag - 1) * (val.Population / world_data.unitsSize['unit_' + v]));							}						});						if (returned != null) {							return returned;						}					}					return amount;				}, units.snob);							if (units.snob > 1 || user_data.noblePlaceLinksForceShow) {					createRallyPointScript(linksContainer, world_data.units, user_data.attackLinkNames.nobleMin, 0, function (amount, v, tag) {						if (v == 'snob') {							return 1;						}						var returned = 0;						$.each(user_data.nobleSupport, function (i, val) {							if (v == val.Unit && villageType.isMatch(val.VillageType)) {								returned = Math.ceil(1 * (val.Population / world_data.unitsSize['unit_' + v]));							}						});						return returned;					});				}							if (units.snob > 0) {					createRallyPointScript(linksContainer, world_data.units, user_data.attackLinkNames.nobleDivide, 0, function (amount, v, tag) {						if (v == 'snob') {							return 1;						}						if (v == 'catapult') {							return 0;						}						if (v == 'ram' && !user_data.noblePlaceLinkDivideAddRam) {							return 0;						}						return Math.floor(amount / units.snob);					});				}			}			}        }		// Color resources		resourceColoring();				// Jump to custom position on the map		mapJump();				// TODO: Sangu settings - add link to them!		//$("#menu_row td:last").before("<td class='menu-item'><a target='_top' href='"+getUrlString("screen=settings&mode=sangu")+"'>Sangu</a></td>");				// adjust links to incoming attacks/support		if (user_data.editAttackLink) {			var incoming = $("table.box:last");			var incomingAttacks = $("a[href*='subtype=attacks']", incoming);			if (incomingAttacks.size() > 0) {				incomingAttacks.attr("href", incomingAttacks.attr("href") + "&page=-1&group=0");			}			var incomingSupport = $("a[href*='subtype=supports']", incoming);			if (incomingSupport.size() > 0) {				incomingSupport.attr("href", incomingSupport.attr("href") + "&page=-1&group=0");			}		}				//var end_time = new Date();		//console.timeEnd("SanguPackage");		//q("" + pad(Math.abs(start_time.getTime() - end_time.getTime()), 3) + " -> " + location.search);    }};function injectScript(func) {    var script = document.createElement('script');    script.setAttribute("type", "application/javascript");    script.textContent = '(' + func + ')();';    document.body.appendChild(script); // run the script    document.body.removeChild(script); // clean up}injectScript(sangu_ready);